<html>
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width">
		<title>早い者勝ち</title>
	</head>
	<style>
* {
/*
	font-size: 1.0ch;
*/
	font-size: 16px;
	color: light-dark(#181a1b, #c8c3bc);
	background-color: #fff;
	background-color: light-dark(#fff, #c8c3bc);
}
@media (prefers-color-scheme: dark) {
	*{
		background-color: #181a1b;
		color: #c8c3bc;
	}
	a{
		color: #69a6d5;
	}
}
body{
	font-family: Open Sans,sans-serif;
	margin: 0px;
}
header > * {
	display: inline-block;
}
header > h1 > a{
	text-decoration: none;
}
header {
	position: sticky;
	top: 0px;
}
nav {
	display: flex;
	justify-content: space-evenly;
}
nav > * {
	border: solid 1px #444;
	width: 100%;
	text-align: center;
}

a{
	color: #337ab7;
	text-decoration: none;
}
table {
	border-collapse: collapse;
	margin: 2ch 0ch;
	width: 100%;
	border-top: solid 1px #444;
}
td, th {
	border-bottom: solid 1px #444;
	padding: 0.5ch 1ch;
}
img {
	width: 1.5ch;
}
button{
	cursor: pointer;
}
#NavSeason > label{
	cursor: pointer;
}
main > article:not(.sc){
	display: none;
}
.DivResults > section:not(.sc2){
	display: none;
}
.active {
	font-weight: bold;
	filter: invert(1);
}
.sortTable th {
	border: outset 3px #888;
	cursor: pointer;
}
.sortTable th:active {
	border-style: inset;
}
.table_playerSummary{
}
.table_playerSummary > :is(thead, tbody) > tr > td:nth-of-type(2) {	/*count*/
	text-align: right;
}
.table_playerSummary > :is(thead, tbody) > tr > td:nth-of-type(3) {	/*level*/
	text-align: right;
}
.table_playerSummary > :is(thead, tbody) > tr > td:nth-of-type(4) {	/*ep*/
	text-align: right;
}
.table_playerSummary > :is(thead, tbody) > tr > td:nth-of-type(5) {	/*ep/level*/
	text-align: right;
}
.table_playerSummary > :is(thead, tbody) > tr > td:nth-of-type(6) {	/*ep/count*/
	text-align: right;
}
.table_playerData{
}
.table_playerData > :is(thead, tbody) > tr > td:nth-of-type(3) {	/*分類*/
	text-align: center;
}
.table_playerData > :is(thead, tbody) > tr > td:nth-of-type(4) {	/*順位*/
	text-align: right;
}
.table_playerData > :is(thead, tbody) > tr > td:nth-of-type(5) {	/*ep*/
	text-align: right;
}
.table_playerData > :is(thead, tbody) > tr > td:nth-of-type(6) {	/*ep/level*/
	text-align: right;
}
.table_allMissionSummary{
}
.table_allMissionSummary > :is(thead, tbody) > tr > td:nth-of-type(2) {	/*数*/
	text-align: right;
}
.table_allMissionSummary > :is(thead, tbody) > tr > td:nth-of-type(3) {	/*レベル*/
	text-align: right;
}
.table_allMissionSummary > :is(thead, tbody) > tr > td:nth-of-type(4) {	/*勝者*/
	text-align: right;
}
.table_allMissionData{
}
.table_allMissionData > :is(thead, tbody) > tr > td:nth-of-type(3) {	/*分類*/
	text-align: center;
}
.table_allMissionData > :is(thead, tbody) > tr > td:nth-of-type(4) {	/*勝者*/
	text-align: right;
}
.table_targetMissionDetail{
}
.table_targetMissionDetail > :is(thead, tbody) > tr > td:nth-of-type(3) {	/*分類*/
	text-align: center;
}
.table_targetMissionDetail > :is(thead, tbody) > tr > td:nth-of-type(4) {	/*勝者*/
	text-align: right;
}
.table_targetMissionWinners{
}
.table_targetMissionWinners > :is(thead, tbody) > tr > td:nth-of-type(1) {	/*順位*/
	text-align: right;
}
.table_targetMissionWinners > :is(thead, tbody) > tr > td:nth-of-type(3) {	/*順位*/
	text-align: right;
}

	</style>
	<body>
		<header>
			<h1><a href="./main.htm" target>早い者勝ち挑戦データ</a></h1>
			<button type="button" id="ButtonCation">注意書き</button>
			<nav id="NavSeason">
			</nav>
			<nav id="NavMain">
			</nav>
		</header>
		<main id="MainContent">
		</main>
	</body>
	<script>
(async()=> {
"use strict";

const SEASONS = ["S108", "S112"];
const IFURL = new class{	//InterFaceURL
	query = {
		get: (key, url = location) => {
			url = new URL(url);
			return url.searchParams.get(key);
		},
		set: (key, value, url = location) => {
			url = new URL(url);
			url.searchParams.set(key, value);
			return url;
		},
		delete: (key, url = location) => {
			url = new URL(url);
			url.searchParams.delete(key);
			return url;
		},
	}
	pushHistory = (url) => {
		history.pushState({}, "", url);
	}
	replaceHistory = (url) => {
		history.replaceState({}, "", url);
	}
}
function uniqueClassName(className, addDOM){
	const tars = document.querySelectorAll(`.${className}`);
	for(let i = tars.length - 1; i >= 0; i--){
		tars[i].classList.remove(className);
	}
	addDOM.classList.add(className);
}
function getDateString(date){
	var YYYY = date.getFullYear().toString().padStart(4, '0');
	var MM = (date.getMonth() + 1).toString().padStart(2, '0');
	var DD = date.getDate().toString().padStart(2, '0');
	
	var HH = date.getHours().toString().padStart(2, '0');
	var mm = date.getMinutes().toString().padStart(2, '0');
  return `${YYYY}-${MM}-${DD} ${HH}:${mm}`;
}

function sortTable(){
	if(event.target.tagName !== "TH"){
		return;
	}
	if(!event.target.textContent){
		return;
	}
	let func;
	if(event.target.dataset.sorted === "1"){
		event.target.dataset.sorted = "2";
		func = function(td1, td2){
			if(!(isNaN(td1) && isNaN(td2))){
				td1 = Number(td1);
				td2 = Number(td2);
			}
			return td1 < td2;
		}
	}else{
		event.target.dataset.sorted = "1";
		func = function(td1, td2){
			if(!(isNaN(td1) && isNaN(td2))){
				td1 = Number(td1);
				td2 = Number(td2);
			}
			return td1 > td2;
		}
	}
	
	const table = event.currentTarget;
	const ths = table.querySelectorAll("th");
	const thnum = Array.from(ths).findIndex((th) => th === event.target) + 1;
	
	const tbody = table.querySelector("tbody");
	const trs = tbody.getElementsByTagName("tr");
	for(let i = 0; i < trs.length; i++){
		let td1 = trs[i].querySelector(`td:nth-child(${thnum})`);
		for(let j = i + 1; j < trs.length; j++){
			const td2 = trs[j].querySelector(`td:nth-child(${thnum})`);
			const ptd1 = td1.dataset.truenum ?? td1.textContent;
			const ptd2 = td2.dataset.truenum ?? td2.textContent;
			if(func(ptd1, ptd2)){
				td1 = td2;
			}
		}
		const tr = td1.closest("tr");
		if(tr !== trs[i]){
			trs[i].insertAdjacentElement("beforebegin", tr);
		}
	}
}


async function getJSON(link){
	const response = await fetch(link);
	return response.json();
}


const full_reconstructFuncs = {
	"J0": function(x, y){
		return `${y}個の${JEMS[x]}を集める`;
	},
	"J1": function(x){
		return `ゲームの報酬で ${x} 個の宝石を集める`;
	},
	"J2": function(x){
		return `${x} 個の宝石を集める`;
	},
	"A0": function(x){
		return `${x} 枚のアリーナチケットを見つける`;
	},
	"A1": function(x){
		return `${x} アリーナコインを稼ぐ`;
	},
	"A2": function(x, y){
		return `L${y} ${ARENAS[x]} のアリーナをクリアする`;
	},
	"A3": function(x){
		return `L${x} 以上のレベルのアリーナをクリアする`;
	},
	"K0": function(x, y, z){
		return `サイズ ${x}x${y}/${z} のカスタムをクリアする`;
	},
	"H0": function(x, y){
		return `レベル  ${MODES[x]} のゲームをヒントなしで ${y} 回クリアする`;
	},
	"H1": function(x, y){
		return `レベル  ${MODES[x]} のゲームを ${y} 秒以内にクリアする`;
	},
	"H2": function(x, y){
		return `レベル  ${MODES[x]} のゲームをフラグなしで ${y} 回クリアする`;
	},
	"H3": function(x, y){
		return `レベル ${MODES[x]} のゲームを ${y} 回連続でクリアする`;
	},
	"H4": function(x, y, z){
		return `レベル ${MODES[x]} のゲームを効率${y}%以上で ${z} 回クリアする`;
	},
	"H5": function(x, y){
		return `レベル ${MODES[x]} のゲームを100回中 ${y} 回クリアする`;
	},
	"H6": function(x, y){
		return `レベル ${MODES[x]} のゲームを24時間以内に ${y} 回クリアする`;
	},
	"H7": function(x, y){
		return `レベル  ${MODES[x]} のゲームを ${y}回クリアする`;
	},
	"M0": function(x){
		return `${x} 名誉ポイントを稼ぐ`;
	},
	"M1": function(x){
		return `ゲームの報酬で ${x} コインを稼ぐ`;
	},
	"M2": function(x){
		return `${x} コインを稼ぐ`;
	},
	"M3": function(x){
		return `イベントポイントを${x}個集める`;
	},
}
const short_reconstructFuncs = {
	"J0": function(x, y){
		return `${y}${JEMS[x]}`;
	},
	"J1": function(x){
		return `${x}宝石（ゲーム報酬）`;
	},
	"J2": function(x){
		return `${x}宝石`;
	},
	"A0": function(x){
		return `${x}アリーナチケット`;
	},
	"A1": function(x){
		return `${x}アリーナコイン`;
	},
	"A2": function(x, y){
		return `L${y}以上の${ARENAS[x]}アリーナ`;
	},
	"A3": function(x){
		return `L${x}以上アリーナ`;
	},
	"K0": function(x, y, z){
		return `カスタム${x}x${y}/${z}`;
	},
	"H0": function(x, y){
		return `${MODES[x]}ヒントなし${y}回`;
	},
	"H1": function(x, y){
		return `${MODES[x]}${y}秒以内`;
	},
	"H2": function(x, y){
		return `${MODES[x]}フラグなし${y}回`;
	},
	"H3": function(x, y){
		return `${MODES[x]}${y}連`;
	},
	"H4": function(x, y, z){
		return `${MODES[x]}効率${y}%以上${z}回`;
	},
	"H5": function(x, y){
		return `${MODES[x]}習熟${y}`;
	},
	"H6": function(x, y){
		return `${MODES[x]}${y}回（24時間以内）`;
	},
	"H7": function(x, y){
		return `${MODES[x]}${y}回`;
	},
	"M0": function(x){
		return `${x}名誉`;
	},
	"M1": function(x){
		return `${x}コイン（ゲーム報酬）`;
	},
	"M2": function(x){
		return `${x}コイン`;
	},
	"M3": function(x){
		return `${x}イベントポイント`;
	},
}
//========================================


const MSO_CONSTANT = await getJSON("./common/mso_constant.json");
const JEMS = MSO_CONSTANT["JEMS"];
const ARENAS = MSO_CONSTANT["ARENAS"];
const MODES = MSO_CONSTANT["MODES"];


const IMG = await getJSON("./common/img_data.json");
const EVENTPOINT_KIND_NAMES = IMG["EVENTPOINT_KIND_NAMES"];
const EVENTPOINT_KIND_IMAGE_HASHS = IMG["EVENTPOINT_KIND_IMAGE_HASHS"];


let HayaData = {};
let Missions = null;
let Players = null;

{
	const nav_season = document.getElementById("NavSeason");
	SEASONS.forEach((season) => {
		const label = document.createElement("label");
		nav_season.append(label);
		const span = document.createElement("span");
		span.textContent = season;
		label.append(span);
		const input = document.createElement("input");
		input.type = "checkbox";
		input.id = `selectSeason${season}`;
		input.dataset.season = season;
		input.addEventListener("change", changeSeasonData);
		label.append(input);
	});
}
function setSeasonHref(article){
	const ancs = article.querySelectorAll("a");
	const season = getSeasons();
	ancs.forEach((anc) => {
		anc.href = IFURL.query.set("season", season, anc.href);
	});
}


const HayaDatas = {};
async function changeSeasonData(){
	IFURL.pushHistory(IFURL.query.set("season", getSeasons()));
	if(event?.isTrusted){
		location.href = location.href;
		return;
	}
	const chkSeasons = document.querySelectorAll("#NavSeason > label > input");
	HayaData = {};
	Missions = {};
	Players = {};
	const checkedSeasons = [];
	for(let i = 0; i < chkSeasons.length; i++){
		const chk = chkSeasons[i];
		if(!chk.checked){
			continue;
		}
		const season = chk.dataset.season;
		if(HayaDatas[season]){
		
		}else{
			HayaDatas[season] = await getJSON(`./${season}/data.json`);
		}
		Object.assign(Missions, HayaDatas[season]["Ms"]);
		Object.assign(Players, HayaDatas[season]["Ps"]);
		checkedSeasons.push(season);
	}
	HayaData["Ms"] = Missions;
	HayaData["Ps"] = Players;
	setSeasonHref(document.getElementById("NavMain"));
}
function getSeasons(){
	return Array.from(document.querySelectorAll("#NavSeason > label > input:checked")).map((ele) => ele.dataset.season).join("-");
}
const Control = new class{
	constructor(){
		this.before_page = null;
		window.addEventListener("popstate", this.popstate);
		document.addEventListener("click", () => {
			const tar = event.target;
			if(tar.tagName !== "A"){
				return;
			}
			if(tar.hasAttribute("target")){
				return;
			}
			event.preventDefault();
			IFURL.pushHistory(tar.href);
			this.popstate();
		});
	}
	popstate = () => {
		const page = IFURL.query.get("page");
		if(Page[page]){
			if(this.before_page !== page){
				Page[page].show();
			}
			this.before_page = page;
			Page[page].show_expansion();
			if(event?.type === "click"){
				window.scroll({top: 0});
			}
		}
	}
}


const Page = {};
class PageData{
	constructor(param){
		this.id = param["id"];
		this.headerText = param["headerText"];
		this.addNavMain();
		this.addMainContent(param["body"]);
		for(const [key, value] of Object.entries(param["functions"])){
			this[key] = value;
		}
		this.show_expansion = param["show_expansion"];
		this.init_function = param["init_function"];
		this.init_function();
		delete this.init_function;
		Page[this.id] = this;
	}
	addNavMain = () => {
		const a = document.createElement("a");
		a.href = `?page=${this.id}`;
		a.textContent = this.headerText;
		document.getElementById("NavMain").append(a);
	}
	addMainContent = (body) => {
		const article = document.createElement("article");
		article.id = `Article${this.id}`;
		article.append(body);
		document.getElementById("MainContent").append(article);
	}
	show = () => {
		uniqueClassName("sc", document.getElementById(`Article${this.id}`));
		uniqueClassName("active", document.querySelector(`#NavMain > a[href*="${this.id}"]`));
	}
}

new PageData({
	id: "PlayerData",
	headerText: "プレイヤー挑戦データ",
	body: (() => {
		const fragment = document.createDocumentFragment();
		const form = document.createElement("form");
		form.setAttribute("onSubmit", "return false;");
		fragment.append(form);
		{
			const label = document.createElement("label");
			label.id = "LabelPlayerID";
			form.append(label);
			const span = document.createElement("span");
			span.textContent = "プレイヤーＩＤ";
			label.append(span);
			const input = document.createElement("input");
			input.type = "number";
			input.min = "0";
			input.step = "1";
			input.value = "16842796";
			label.append(input);
		}
		{
			const button = document.createElement("button");
			button.id = "FormPlayerDataSubmit";
			button.type = "submit";
			button.textContent = "探す";
			form.append(button);
		}
		{
			const div = document.createElement("div");
			div.classList.add("DivResults");
			fragment.append(div);
		}
		return fragment;
	})(),
	functions: {
		"click_search": function(){
			const player_id = document.querySelector("#LabelPlayerID > input").value;
			if(this.isExist(player_id)){
				let url = IFURL.query.set("player_id", player_id);
				url = IFURL.query.set("season", getSeasons(), url);
				IFURL.pushHistory(url);
				this.main_search();
			}
		},
		"isExist": function(player_id){
			if(!player_id){
				return false;
			}
			if(!Players[player_id]){
				alert("プレイヤーがいません。");
				return false;
			}
			return true;
		},
		"popstate_search": function(){
			const player_id = IFURL.query.get("player_id");
			if(this.isExist(player_id)){
				document.querySelector("#LabelPlayerID > input").value = player_id;
				this.main_search();
			}else{
				document.querySelector("#ArticlePlayerData .sc2")?.classList.remove("sc2");
			}
		},
		"main_search": function(){
			const player_id = document.querySelector("#LabelPlayerID > input").value;
			const player_name = Players[player_id];
			const datas = [];
			for(const [mission_id, mission_data] of Object.entries(Missions)){
				for(let i = 0; i < mission_data["Ws"].length; i++){
					const windata = mission_data["Ws"][i];
					if(windata[0] === player_id){
						const o = {};
						o["L"] = mission_data["L"];
						o["D"] = mission_data["D"];
						o["I"] = mission_data["I"];
						o["R"] = i + 1;
						o["P"] = windata[1];
						o["MissionID"] = mission_id;
						datas.push(o);
					}
				}
			}
			
			const result_div = document.querySelector("#ArticlePlayerData .DivResults");
			{
				const exist_data_section = result_div.querySelector(`.player${player_id}`);
				if(exist_data_section){
					uniqueClassName("sc2", exist_data_section);
					return;
				}
			}
			const section = document.createElement("section");
			section.classList.add(`player${player_id}`);
			uniqueClassName("sc2", section);
			result_div.append(section);
			const sum_table = document.createElement("table");
			sum_table.classList.add("table_playerSummary");
			const data_table = document.createElement("table");
			data_table.classList.add("table_playerData");
			const kind_sums = {};
			const basesrc = datas[0]["I"].replace(/\/\d.+/, "");
			for(const kind of Object.keys(EVENTPOINT_KIND_NAMES)){
				kind_sums[kind] = {};
				kind_sums[kind]["levels"] = 0;
				kind_sums[kind]["eps"] = 0;
				kind_sums[kind]["count"] = 0;
				for(const [src, key] of Object.entries(EVENTPOINT_KIND_IMAGE_HASHS)){
					if(src.includes(basesrc) && key === kind){
						kind_sums[kind]["img"] = src;
					}
				}
			}
			{
				const table = data_table;
				table.addEventListener("click", sortTable);
				table.classList.add("sortTable");
				const caption = document.createElement("caption");
				caption.innerHTML = `<b>${player_name}</b>さんのクエストデータ`;
				table.append(caption);
				const thead = document.createElement("thead");
				table.append(thead);
				{
					const tr = document.createElement("tr");
					thead.append(tr);
					{
						const th = document.createElement("th");
						th.textContent = "レベル⚡️";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "内容";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "分類";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "順位👑";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "ep🎃";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "ep/⚡️";
						tr.append(th);
					}
				}
				const tbody = document.createElement("tbody");
				table.append(tbody);
				datas.forEach((data) => {
					const tr = document.createElement("tr");
					tbody.append(tr);
					let level = data["L"].replace("L", "");
					if(level.includes("E")){
						level = level.replace("E", "");
						level = Number(level) * 3;
					}else{
						level = Number(level);
					}
					const eps = Number(data["P"]);
					const kind = EVENTPOINT_KIND_IMAGE_HASHS[data["I"]];
					kind_sums[kind]["levels"] += level;
					kind_sums[kind]["eps"] += eps;
					kind_sums[kind]["count"] += 1;
					{
						const td = document.createElement("td");
						td.textContent = data["L"];
						td.dataset.truenum = level;
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						const param = data["D"].split("#");
						td.textContent = short_reconstructFuncs[param["0"]](param["1"], param["2"], param["3"]);
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.dataset.truenum = EVENTPOINT_KIND_IMAGE_HASHS[data["I"]];
						tr.append(td);
						const img = document.createElement("img");
						img.src = data["I"];
						td.append(img);
					}
					{
						const td = document.createElement("td");
						const a = document.createElement("a");
						a.href = `?page=MissionData&mission_id=${data["MissionID"]}`;
						a.textContent = data["R"];
						td.append(a);
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = data["P"];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						const num = Number.parseFloat(Number(data["P"]) / level);
						if(Number.isNaN(num)){
							td.textContent = "";
							td.dataset.truenum = 0;
						}else{
							td.textContent = num.toFixed(2);
						}
						tr.append(td);
					}
				});
			}
			{
				const putDatas = [];
				{
					for(const [key, value] of Object.entries(kind_sums)){
						putDatas.push([EVENTPOINT_KIND_NAMES[key], value["img"], key, value["levels"], value["eps"], value["count"]]);
					}
					const s_levels = Object.values(kind_sums).reduce((sum, data) => sum + data["levels"], 0);
					const s_eps = Object.values(kind_sums).reduce((sum, data) => sum + data["eps"], 0);
					const s_count = Object.values(kind_sums).reduce((sum, data) => sum + data["count"], 0);
					putDatas.push(["＊合計", "", "ZZ", s_levels, s_eps, s_count]);
				}
				const table = sum_table;
				table.addEventListener("click", sortTable);
				table.classList.add("sortTable");
				const caption = document.createElement("caption");
				caption.innerHTML = `<b>${player_name}</b>さんのデータまとめ`;
				table.append(caption);
				const thead = document.createElement("thead");
				table.append(thead);
				{
					const tr = document.createElement("tr");
					thead.append(tr);
					{
						const th = document.createElement("th");
						th.textContent = "分類";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "mission🪧";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "レベル⚡️";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "ep🎃";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "🎃/⚡️";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "🎃/🪧";
						tr.append(th);
					}
				}
				const tbody = document.createElement("tbody");
				table.append(tbody);
				putDatas.forEach((arr) => {
					const tr = document.createElement("tr");
					tbody.append(tr);
					{
						const td = document.createElement("td");
						td.textContent = arr[0];
						if(arr[1]){
							const img = document.createElement("img");
							img.src = arr[1];
							td.append(img);
						}
						td.dataset.truenum = arr[2]
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[5];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[3];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[4];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						const num = Number.parseFloat(arr[4] / arr[3]);
						if(Number.isNaN(num)){
							td.textContent = "";
							td.dataset.truenum = 0;
						}else{
							td.textContent = num.toFixed(2);
						}
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						const num = Number.parseFloat(arr[4] / arr[5]);
						if(Number.isNaN(num)){
							td.textContent = "";
							td.dataset.truenum = 0;
						}else{
							td.textContent = num.toFixed(2);
						}
						tr.append(td);
					}
				});
			}
			section.append(sum_table);
			section.append(data_table);
			setSeasonHref(section);
		},
	},
	show_expansion: function(){
		this.popstate_search();
	},
	init_function: function(){
		document.getElementById("FormPlayerDataSubmit").addEventListener("click", this.click_search.bind(this));
	},
});
new PageData({
	id: "AllPlayerData",
	headerText: "全体のデータ",
	body: (() => {
		const fragment = document.createDocumentFragment();
		const span = document.createElement("span");
		span.textContent = "まだ作っていません。";
		fragment.append(span);
		return fragment;
	})(),
	functions: {
	},
	show_expansion: function(){
	
	},
	init_function: function(){
	},
});
new PageData({
	id: "MissionData",
	headerText: "ミッションデータ",
	body: (() => {
		const fragment = document.createDocumentFragment();
		const form = document.createElement("form");
		form.setAttribute("onSubmit", "return false;");
		fragment.append(form);
		{
			const label = document.createElement("label");
			label.id = "LabelMissionID";
			form.append(label);
			const span = document.createElement("span");
			span.textContent = "ミッションＩＤ";
			label.append(span);
			const input = document.createElement("input");
			input.type = "number";
			input.min = "0";
			input.step = "1";
			input.value = "5819";
			label.append(input);
		}
		{
			const button = document.createElement("button");
			button.id = "FormMissionDataSubmit";
			button.type = "submit";
			button.textContent = "探す";
			form.append(button);
		}
		{
			const button = document.createElement("button");
			button.id = "FormAllMissionDataSubmit";
			button.type = "submit";
			button.textContent = "全部見る";
			form.append(button);
		}
		{
			const div = document.createElement("div");
			div.classList.add("DivResults");
			fragment.append(div);
		}
		return fragment;
	})(),
	functions: {
		"click_target_search": function(){
			const mission_id = document.querySelector("#LabelMissionID > input").value;
			if(this.isExist(mission_id)){
				let url = IFURL.query.set("mission_id", mission_id);
				url = IFURL.query.set("season", getSeasons(), url);
				IFURL.pushHistory(url);
				this.search_mission_detail();
			}
		},
		"click_all_search": function(){
			let url = IFURL.query.set("page", this.id);
			url = IFURL.query.delete("mission_id", url);
			url = IFURL.query.set("season", getSeasons(), url);
			IFURL.pushHistory(url);
			this.search_all_mission();
		},
		"isExist": function(mission_id){
			if(!mission_id){
				return false;
			}
			if(!Missions[mission_id]){
				alert(`ミッションＩＤ「${mission_id}」はありません。`);
				return false;
			}
			return true;
		},
		"popstate_search": function(){
			const mission_id = IFURL.query.get("mission_id");
			if(!mission_id){
				this.search_all_mission();
				return;
			}
			if(this.isExist(mission_id)){
				document.querySelector("#LabelMissionID > input").value = mission_id;
				this.search_mission_detail();
				return;
			}
			document.querySelector("#ArticleMissionData .sc2")?.classList.remove("sc2");
		},
		"search_all_mission": function(){
			const result_div = document.querySelector("#ArticleMissionData .DivResults");
			{
				const exist_data_section = result_div.querySelector(".all_mission");
				if(exist_data_section){
					uniqueClassName("sc2", exist_data_section);
					return;
				}
			}
			
			const datas = [];
			for(const [key, value] of Object.entries(Missions)){
				const o = {};
				o["ID"] = key;
				o["L"] = value["L"];
				o["D"] = value["D"];
				o["I"] = value["I"];
				o["S"] = value["S"];
				o["T"] = value["T"];
				o["Ws"] = value["Ws"].length;
				datas.push(o);
			}
			
			const section = document.createElement("section");
			section.classList.add("all_mission");
			uniqueClassName("sc2", section);
			result_div.append(section);
			
			const kind_sums = {};
			const basesrc = datas[0]["I"].replace(/\/\d.+/, "");
			for(const kind of Object.keys(EVENTPOINT_KIND_NAMES)){
				kind_sums[kind] = {};
				kind_sums[kind]["levels"] = 0;
				kind_sums[kind]["winners"] = 0;
				kind_sums[kind]["count"] = 0;
				for(const [src, key] of Object.entries(EVENTPOINT_KIND_IMAGE_HASHS)){
					if(src.includes(basesrc) && key === kind){
						kind_sums[kind]["img"] = src;
					}
				}
			}
			
			const sum_table = document.createElement("table");
			const data_table = document.createElement("table");
			{
				const table = data_table;
				table.classList.add("table_allMissionData");
				table.addEventListener("click", sortTable);
				table.classList.add("sortTable");
				const caption = document.createElement("caption");
				caption.innerHTML = "ミッションデータ一覧";
				table.append(caption);
				const thead = document.createElement("thead");
				table.append(thead);
				{
					const tr = document.createElement("tr");
					thead.append(tr);
					{
						const th = document.createElement("th");
						th.textContent = "レベル⚡️";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "内容";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "分類";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "勝者";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "シーズン";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "開催時刻";
						tr.append(th);
					}
				}
				const tbody = document.createElement("tbody");
				table.append(tbody);
				datas.forEach((data) => {
					const tr = document.createElement("tr");
					tbody.append(tr);
					let level = data["L"].replace("L", "");
					if(level.includes("E")){
						level = level.replace("E", "");
						level = Number(level) * 3;
					}else{
						level = Number(level);
					}
					const kind = EVENTPOINT_KIND_IMAGE_HASHS[data["I"]];
					kind_sums[kind]["levels"] += level;
					kind_sums[kind]["winners"] += data["Ws"];
					kind_sums[kind]["count"] += 1;
					{
						const td = document.createElement("td");
						td.textContent = data["L"];
						td.dataset.truenum = level;
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						const param = data["D"].split("#");
						td.textContent = short_reconstructFuncs[param["0"]](param["1"], param["2"], param["3"]);
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.dataset.truenum = EVENTPOINT_KIND_IMAGE_HASHS[data["I"]];
						tr.append(td);
						const img = document.createElement("img");
						img.src = data["I"];
						td.append(img);
					}
					{
						const td = document.createElement("td");
						const a = document.createElement("a");
						a.href = `?page=MissionData&mission_id=${data["ID"]}`;
						a.textContent = data["Ws"];
						td.append(a);
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = data["S"];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = getDateString(new Date(data["T"]));
						tr.append(td);
					}
				});
			}
			{
				const putDatas = [];
				{
					for(const [key, value] of Object.entries(kind_sums)){
						putDatas.push([EVENTPOINT_KIND_NAMES[key], value["img"], key, value["levels"], value["winners"], value["count"]]);
					}
					const s_levels = Object.values(kind_sums).reduce((sum, data) => sum + data["levels"], 0);
					const s_winners = Object.values(kind_sums).reduce((sum, data) => sum + data["winners"], 0);
					const s_count = Object.values(kind_sums).reduce((sum, data) => sum + data["count"], 0);
					putDatas.push(["＊合計", "", "ZZ", s_levels, s_winners, s_count]);
				}
				const table = sum_table;
				table.classList.add("table_allMissionSummary");
				table.addEventListener("click", sortTable);
				table.classList.add("sortTable");
				const caption = document.createElement("caption");
				caption.innerHTML = "ミッションデータまとめ";
				table.append(caption);
				const thead = document.createElement("thead");
				table.append(thead);
				{
					const tr = document.createElement("tr");
					thead.append(tr);
					{
						const th = document.createElement("th");
						th.textContent = "分類";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "mission🪧";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "レベル⚡️";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "勝者";
						tr.append(th);
					}
				}
				const tbody = document.createElement("tbody");
				table.append(tbody);
				putDatas.forEach((arr) => {
					const tr = document.createElement("tr");
					tbody.append(tr);
					{
						const td = document.createElement("td");
						td.textContent = arr[0];
						if(arr[1]){
							const img = document.createElement("img");
							img.src = arr[1];
							td.append(img);
						}
						td.dataset.truenum = arr[2]
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[5];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[3];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[4];
						tr.append(td);
					}
				});
			}
			section.append(sum_table);
			section.append(data_table);
		},
		"search_mission_detail": function(){
			const mission_id = document.querySelector("#LabelMissionID > input").value;
			const result_div = document.querySelector("#ArticleMissionData .DivResults");
			{
				const exist_data_section = result_div.querySelector(`.mission${mission_id}`);
				if(exist_data_section){
					uniqueClassName("sc2", exist_data_section);
					return;
				}
			}
			
			const section = document.createElement("section");
			section.classList.add(`mission${mission_id}`);
			uniqueClassName("sc2", section);
			result_div.append(section);
			
			const datao = Missions[mission_id];
			
			{
				const table = document.createElement("table");
				table.classList.add("table_targetMissionDetail");
//				table.addEventListener("click", sortTable);
//				table.classList.add("sortTable");
				const caption = document.createElement("caption");
				caption.innerHTML = `ミッション「<b>${mission_id}</b>」のデータ`;
				table.append(caption);
				const thead = document.createElement("thead");
				table.append(thead);
				{
					const tr = document.createElement("tr");
					thead.append(tr);
					{
						const th = document.createElement("th");
						th.textContent = "レベル⚡️";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "内容";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "分類";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "勝者";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "シーズン";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "開催時刻";
						tr.append(th);
					}
				}
				const tbody = document.createElement("tbody");
				table.append(tbody);
				{
					const data = datao;
					const tr = document.createElement("tr");
					tbody.append(tr);
					{
						let level = data["L"].replace("L", "");
						if(level.includes("E")){
							level = level.replace("E", "");
							level = Number(level) * 3;
						}else{
							level = Number(level);
						}
						const td = document.createElement("td");
						td.textContent = data["L"];
						td.dataset.truenum = level;
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						const param = data["D"].split("#");
						td.textContent = full_reconstructFuncs[param["0"]](param["1"], param["2"], param["3"]);
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.dataset.truenum = EVENTPOINT_KIND_IMAGE_HASHS[data["I"]];
						tr.append(td);
						const img = document.createElement("img");
						img.src = data["I"];
						td.append(img);
					}
					{
						const td = document.createElement("td");
						td.textContent = data["Ws"].length;
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = data["S"];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = getDateString(new Date(data["T"]));
						tr.append(td);
					}
				}
				section.append(table);
			}
			{
				const table = document.createElement("table");
				table.classList.add("table_targetMissionWinners");
				table.addEventListener("click", sortTable);
				table.classList.add("sortTable");
				const caption = document.createElement("caption");
				caption.innerHTML = `ミッション「<b>${mission_id}</b>」の勝者データ`;
				table.append(caption);
				const thead = document.createElement("thead");
				table.append(thead);
				{
					const tr = document.createElement("tr");
					thead.append(tr);
					{
						const th = document.createElement("th");
						th.textContent = "順位👑";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "プレイヤー";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "ep🎃";
						tr.append(th);
					}
				}
				const tbody = document.createElement("tbody");
				table.append(tbody);
				let rank = 0;
				datao["Ws"].forEach((arr) => {
					rank++;
					const tr = document.createElement("tr");
					tbody.append(tr);
					{
						const td = document.createElement("td");
						td.textContent = rank;
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						const a = document.createElement("a");
						a.href = `?page=PlayerData&player_id=${arr[0]}`;
						a.textContent = Players[arr[0]];
						td.append(a);
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[1];
						tr.append(td);
					}
				});
				section.append(table);
			}
		},
	},
	show_expansion: function(){
		this.popstate_search();
	},
	init_function: function(){
		document.getElementById("FormMissionDataSubmit").addEventListener("click", this.click_target_search.bind(this));
		document.getElementById("FormAllMissionDataSubmit").addEventListener("click", this.click_all_search.bind(this));

	},
});

document.getElementById("ButtonCation").addEventListener("click", () => {
	const str1 = `
●データを取得した最終時刻は08:50辺りなので、それ以降にクリアしたプレイヤーはデータに含まれていません。
●プレイヤー名は各シーズン最終日当時のものです。
●獲得epは補正値無しのものです。
●小数は小数点以下2位を四捨五入しています。
`;
	const str2 = `
●作った人：魚頭男
●当コンテンツはMSO様より公認を受けていない非公認のものです。
●当コンテンツについてMSO様にお問い合わせを絶対にしないでください。
●問題などありましたら直ちに公開を取りやめいたします。
`;
	alert(str1);
	alert(str2);
});

async function startUp(){
	const getSeasons = IFURL.query.get("season")?.split("-");
	if(getSeasons?.length && getSeasons[0]){
		getSeasons.forEach((season) => {
			document.getElementById(`selectSeason${season}`).checked = true;
		});
	}else{
		document.querySelector("#NavSeason > label:last-child > input").checked = true;
	}
	await changeSeasonData();
	Control.popstate();
}
startUp();






/*
//件数チェック用
{
	const textarea = document.createElement("textarea");
	let putData = [];
	for(const [mission_id, mission_data] of Object.entries(Missions)){
		putData.push(mission_id);
	}
	putData = putData.sort();
	textarea.value = putData.join("\n");
	document.body.append(textarea);
}
*/
/*
//開催時刻セット用
{
	const button = document.createElement("button");
	button.type = "button";
	button.textContent = "開催時刻セット";
	document.body.append(button);
	button.addEventListener("click", () => {
		const day = new Date('2025-04-04 9:00');
		let i = 0;
		for(const [mission_id, mission_data] of Object.entries(Missions)){
			i++;
			mission_data["T"] = day.getTime();
			if(i === 2){
				day.setHours(day.getHours() + 1);
				i = 0;
			}
		}
		const textarea = document.createElement("textarea");
		textarea.value = JSON.stringify(HayaData);
		document.body.append(textarea);
	});
}
*/
/*
//クエストの内容を出力する
let arr = [];
const trs = document.querySelectorAll("table")[1].querySelectorAll("tbody > tr");
Array.from(trs).forEach((tr) => {
	const td = tr.querySelector(":scope > td:nth-child(2)");
	arr.push(td.textContent);
});

arr = [...new Set(arr)];
console.log(arr.join("\n"));
*/

/*
//クエストを圧縮する
{
function traceObject(obj){
	return Object.fromEntries(Object.entries(obj).map(([key, value]) => [value, key]));
}
const RE_JEMS = traceObject(JEMS);
const RE_ARENAS = traceObject(ARENAS);
const RE_MODES = traceObject(MODES);

const compactFuncs = [
	function(str){
		for(const [key, value] of Object.entries(RE_JEMS)){
			if(str.includes(key)){
				const num = str.match(/\d+/)
				return ["J0", value, num];
			}
		}
	},
	function(str){
		if(/宝石/.test(str)){
			const num = str.match(/\d+/) ?? 1;
			if(/ゲームの報酬で/.test(str)){
				return ["J1", num];
			}
			return ["J2", num];
		}
	},
	function(str){
		if(/アリーナチケット/.test(str)){
			const num = str.match(/\d+/) ?? 1;
			return ["A0", num];
		}
	},
	function(str){
		if(/アリーナコイン/.test(str)){
			const num = str.match(/\d+/) ?? 1;
			return ["A1", num];
		}
	},
	function(str){
		if(!/アリーナ/.test(str)){
			return;
		}
		const num = str.match(/\d+/);
		for(const [key, value] of Object.entries(RE_ARENAS)){
			if(str.includes(key)){
				return ["A2", value, num];
			}
		}
		return ["A3", num];
	},
	function(str){
		if(/カスタム/.test(str)){
			const nums = str.match(/\d+/g);
			return ["K0", nums[0], nums[1], nums[2]];
		}
	},
	function(str){
		for(const [key, value] of Object.entries(RE_MODES)){
			if(str.includes(key)){
				const num = str.match(/\d+/) ?? 1;
				if(/ヒントなし/.test(str)){
					return ["H0", value, num];
				}
				if(/秒以内/.test(str)){
					return ["H1", value, num];
				}
				if(/フラグなし/.test(str)){
					return ["H2", value, num];
				}
				if(/連続/.test(str)){
					return ["H3", value, num];
				}
				const num2 = str.match(/\d+/g);
				if(/効率/.test(str)){
					return ["H4", value, num2[0], num2[1] ?? 1];
				}
				if(/回中/.test(str)){
					return ["H5", value, num2[1]];
				}
				if(/24時間/.test(str)){
					return ["H6", value, num2[1]];
				}
				return ["H7", value, num];
			}
		}
	},
	function(str){
		if(/名誉ポイント/.test(str)){
			const num = str.match(/\d+/) ?? 1;
			return ["M0", num];
		}
	},
	function(str){
		if(/コイン/.test(str)){
			const num = str.match(/\d+/) ?? 1;
			if(/ゲームの報酬で/.test(str)){
				return ["M1", num];
			}
			return ["M2", num];
		}
	},
	function(str){
		if(/イベントポイント/.test(str)){
			const num = str.match(/\d+/) ?? 1;
			return ["M3", num];
		}
	},
];

//圧縮
for(const [mission_id, mission_data] of Object.entries(Missions)){
	for(let i = 0; i < compactFuncs.length; i++){
		const rs = compactFuncs[i](mission_data["D"]);
		if(rs){
			mission_data["D"] = rs.join("#");
			break;
		}
	}
}
	const textarea = document.createElement("textarea");
	textarea.value = JSON.stringify(HayaData);
	document.body.append(textarea);
}
*/

})();
  </script>
</html>
