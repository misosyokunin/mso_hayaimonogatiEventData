<html>
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width">
		<title>早い者勝ち</title>
	</head>
	<style>
* {
	font-size: 1.0ch;
	color: light-dark(#181a1b, #c8c3bc);
	background-color: light-dark(#fff, #c8c3bc);
}
@media (prefers-color-scheme: dark) {
	*{
		background-color: #181a1b;
		color: #c8c3bc;
	}
}
body{
/*
	width: 300px;
	max-width: 300px;
*/
	font-family: Open Sans,sans-serif;
}
header > * {
	display: inline-block;
}
header > h1 > a{
	text-decoration: none;
}
nav {
	display: flex;
	justify-content: space-evenly;
}
nav > * {
	border: solid 1px #444;
	width: 100%;
	text-align: center;
}

table {
	border-collapse: collapse;
	margin: 2ch 0ch;
	width: 100%;
}
td, th {
	border: solid 1px #444;
}
img {
	width: 1.5ch;
}
button{
	cursor: pointer;
}
main > article:not(.sc){
	display: none !important;
}
#ArticlePlayerData{
	display: block;
}
#ArticleMissionAllData{
	display: block;
}
.DivResults > section:not(.sc2){
	display: none;
}

	</style>
	<body>
		<header>
			<h1><a href="./main.htm">早い者勝ち挑戦データ</a></h1>
			<button type="button" id="ButtonCation">注意書き</button>
		</header>
		<nav id="NavMain">
		</nav>
		<main id="MainContent">
		</main>
	</body>
	<script>
(async()=> {
"use strict";

const IFURL = new class{	//InterFaceURL
	query = {
		get: (key) => {
			const url = new URL(location);
			return url.searchParams.get(key);
		},
		set: (key, value) => {
			const url = new URL(location);
			url.searchParams.set(key, value);
			return url;
		},
	}
	pushHistory = (url) => {
		history.pushState({}, "", url);
	}
	replaceHistory = (url) => {
		history.replaceState({}, "", url);
	}
}
function uniqueClassName(className, addDOM){
	const tars = document.querySelectorAll(`.${className}`);
	for(let i = tars.length - 1; i >= 0; i--){
		tars[i].classList.remove(className);
	}
	addDOM.classList.add(className);
}

function sortTable(){
	if(event.target.tagName !== "TH"){
		return;
	}
	if(!event.target.textContent){
		return;
	}
	let func;
	if(event.target.dataset.sorted === "1"){
		event.target.dataset.sorted = "2";
		func = function(td1, td2){
			if(!(isNaN(td1) && isNaN(td2))){
				td1 = Number(td1);
				td2 = Number(td2);
			}
			return td1 < td2;
		}
	}else{
		event.target.dataset.sorted = "1";
		func = function(td1, td2){
			if(!(isNaN(td1) && isNaN(td2))){
				td1 = Number(td1);
				td2 = Number(td2);
			}
			return td1 > td2;
		}
	}
	
	const table = event.currentTarget;
	const ths = table.querySelectorAll("th");
	const thnum = Array.from(ths).findIndex((th) => th === event.target) + 1;
	
	const tbody = table.querySelector("tbody");
	const trs = tbody.getElementsByTagName("tr");
	for(let i = 0; i < trs.length; i++){
		let td1 = trs[i].querySelector(`td:nth-child(${thnum})`);
		for(let j = i + 1; j < trs.length; j++){
			const td2 = trs[j].querySelector(`td:nth-child(${thnum})`);
			const ptd1 = td1.dataset.truenum ?? td1.textContent;
			const ptd2 = td2.dataset.truenum ?? td2.textContent;
			if(func(ptd1, ptd2)){
				td1 = td2;
			}
		}
		const tr = td1.closest("tr");
		if(tr !== trs[i]){
			trs[i].insertAdjacentElement("beforebegin", tr);
		}
	}
}

async function getJSON(link){
	const response = await fetch(link);
	return response.json();
}

const IMG = await getJSON("./common/img_data.json");
const EVENTPOINT_KIND_NAMES = IMG["EVENTPOINT_KIND_NAMES"];
const EVENTPOINT_KIND_IMAGE_HASHS = IMG["EVENTPOINT_KIND_IMAGE_HASHS"];


const HayaData = await getJSON("./S108/data.json");
const Missions = HayaData["Ms"];
const Players = HayaData["Ps"];

const Control = new class{
	constructor(){
		this.before_page = null;
		window.addEventListener("popstate", this.popstate);
		document.getElementById("NavMain").addEventListener("click", () => {
			event.preventDefault();
			const tar = event.target;
			if(tar.tagName !== "A"){
				return;
			}
			IFURL.pushHistory(tar.href);
			this.popstate();
		});
	}
	popstate = () => {
		const page = IFURL.query.get("page");
		if(Page[page]){
			if(this.before_page !== page){
				Page[page].show();
			}
			this.before_page = page;
			Page[page].show_expansion();
		}else{
			document.querySelector(".sc")?.classList.remove("sc");;
			IFURL.replaceHistory("main.htm");
		}
	}
}

const Page = {};
class PageData{
	constructor(param){
		this.id = param["id"];
		this.headerText = param["headerText"];
		this.addNavMain();
		this.addMainContent(param["body"]);
		for(const [key, value] of Object.entries(param["functions"])){
			this[key] = value;
		}
		this.show_expansion = param["show_expansion"];
		this.init_function = param["init_function"];
		this.init_function();
		delete this.init_function;
		Page[this.id] = this;
	}
	addNavMain = () => {
		const a = document.createElement("a");
		a.href = `./main.htm?page=${this.id}`;
		a.textContent = this.headerText;
		document.getElementById("NavMain").append(a);
	}
	addMainContent = (body) => {
		const article = document.createElement("article");
		article.id = `Article${this.id}`;
		article.append(body);
		document.getElementById("MainContent").append(article);
	}
	show = () => {
		uniqueClassName("sc", document.getElementById(`Article${this.id}`));
	}
}

new PageData({
	id: "PlayerData",
	headerText: "プレイヤー挑戦データ",
	body: (() => {
		const fragment = document.createDocumentFragment();
		const form = document.createElement("form");
		form.setAttribute("onSubmit", "return false;");
		fragment.append(form);
		{
			const label = document.createElement("label");
			label.id = "LabelPlayerID";
			form.append(label);
			const span = document.createElement("span");
			span.textContent = "プレイヤーＩＤ";
			label.append(span);
			const input = document.createElement("input");
			input.type = "number";
			input.min = "0";
			input.step = "1";
			input.value = "16842796";
			label.append(input);
		}
		{
			const button = document.createElement("button");
			button.id = "FormPlayerDataSubmit";
			button.type = "submit";
			button.textContent = "探す";
			form.append(button);
		}
		{
			const div = document.createElement("div");
			div.classList.add("DivResults");
			fragment.append(div);
		}
		return fragment;
	})(),
	functions: {
		"click_search": function(){
			const player_id = document.querySelector("#LabelPlayerID > input").value;
			if(this.isExistPlayer(player_id)){
				const url = IFURL.query.set("player_id", player_id);
				IFURL.pushHistory(url);
				this.main_search();
			}
		},
		"isExistPlayer": function(player_id){
			if(!player_id){
				return false;
			}
			if(!Players[player_id]){
				alert("プレイヤーがいません。");
				return false;
			}
			return true;
		},
		"popstate_search": function(){
			const player_id = IFURL.query.get("player_id");
			if(this.isExistPlayer(player_id)){
				document.querySelector("#LabelPlayerID > input").value = player_id;
				this.main_search();
			}else{
				document.querySelector("#ArticlePlayerData .sc2")?.classList.remove("sc2");
			}
		},
		"main_search": function(){
			const player_id = document.querySelector("#LabelPlayerID > input").value;
			const player_name = Players[player_id];
			const datas = [];
			for(const [mission_id, mission_data] of Object.entries(Missions)){
				for(let i = 0; i < mission_data["Ws"].length; i++){
					const windata = mission_data["Ws"][i];
					if(windata[0] === player_id){
						const o = {};
						o["L"] = mission_data["L"];
						o["D"] = mission_data["D"];
						o["I"] = mission_data["I"];
						o["R"] = i + 1;
						o["P"] = windata[1];
						datas.push(o);
					}
				}
			}
			
			const result_div = document.querySelector("#ArticlePlayerData .DivResults");
			{
				const exist_data_section = result_div.querySelector(`.player${player_id}`);
				if(exist_data_section){
					uniqueClassName("sc2", exist_data_section);
					return;
				}
			}
			const section = document.createElement("section");
			section.classList.add(`player${player_id}`);
			uniqueClassName("sc2", section);
			result_div.append(section);
			const sum_table = document.createElement("table");
			const data_table = document.createElement("table");
			const kind_sums = {};
			const basesrc = datas[0]["I"].replace(/\/\d.+/, "");
			for(const kind of Object.keys(EVENTPOINT_KIND_NAMES)){
				kind_sums[kind] = {};
				kind_sums[kind]["levels"] = 0;
				kind_sums[kind]["eps"] = 0;
				kind_sums[kind]["count"] = 0;
				for(const [src, key] of Object.entries(EVENTPOINT_KIND_IMAGE_HASHS)){
					if(src.includes(basesrc) && key === kind){
						kind_sums[kind]["img"] = src;
					}
				}
			}
			{
				const table = data_table;
				table.addEventListener("click", sortTable);
				const caption = document.createElement("caption");
				caption.innerHTML = `<b>${player_name}</b>さんのクエストデータ`;
				table.append(caption);
				const thead = document.createElement("thead");
				table.append(thead);
				{
					const tr = document.createElement("tr");
					thead.append(tr);
					{
						const th = document.createElement("th");
						th.textContent = "レベル⚡️";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "内容";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "順位";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "ep🎃";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "分類";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "🎃/⚡️";
						tr.append(th);
					}
				}
				const tbody = document.createElement("tbody");
				table.append(tbody);
				datas.forEach((data) => {
					const tr = document.createElement("tr");
					tbody.append(tr);
					let level = data["L"].replace("L", "");
					if(level.includes("E")){
						level = level.replace("E", "");
						level = Number(level) * 3;
					}else{
						level = Number(level);
					}
					const eps = Number(data["P"]);
					const kind = EVENTPOINT_KIND_IMAGE_HASHS[data["I"]];
					kind_sums[kind]["levels"] += level;
					kind_sums[kind]["eps"] += eps;
					kind_sums[kind]["count"] += 1;
					{
						const td = document.createElement("td");
						td.textContent = data["L"];
						td.dataset.truenum = level;
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = data["D"];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = data["R"];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = data["P"];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.dataset.truenum = EVENTPOINT_KIND_IMAGE_HASHS[data["I"]];
						tr.append(td);
						const img = document.createElement("img");
						img.src = data["I"];
						td.append(img);
					}
					{
						const td = document.createElement("td");
						const num = Number.parseFloat(Number(data["P"]) / level);
						if(Number.isNaN(num)){
							td.textContent = "";
							td.dataset.truenum = 0;
						}else{
							td.textContent = num.toFixed(2);
						}
						tr.append(td);
					}
				});
			}
			{
				const putDatas = [];
				{
					for(const [key, value] of Object.entries(kind_sums)){
						putDatas.push([EVENTPOINT_KIND_NAMES[key], value["img"], key, value["levels"], value["eps"], value["count"]]);
					}
					const s_levels = Object.values(kind_sums).reduce((sum, data) => sum + data["levels"], 0);
					const s_eps = Object.values(kind_sums).reduce((sum, data) => sum + data["eps"], 0);
					const s_count = Object.values(kind_sums).reduce((sum, data) => sum + data["count"], 0);
					putDatas.push(["＊合計", "", "ZZ", s_levels, s_eps, s_count]);
				}
				const table = sum_table;
				table.addEventListener("click", sortTable);
				const caption = document.createElement("caption");
				caption.innerHTML = `<b>${player_name}</b>さんのデータまとめ`;
				table.append(caption);
				const thead = document.createElement("thead");
				table.append(thead);
				{
					const tr = document.createElement("tr");
					thead.append(tr);
					{
						const th = document.createElement("th");
						th.textContent = "分類";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "mission🪧";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "レベル⚡️";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "ep🎃";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "🎃/⚡️";
						tr.append(th);
					}
					{
						const th = document.createElement("th");
						th.textContent = "🎃/🪧";
						tr.append(th);
					}
				}
				const tbody = document.createElement("tbody");
				table.append(tbody);
				putDatas.forEach((arr) => {
					const tr = document.createElement("tr");
					tbody.append(tr);
					{
						const td = document.createElement("td");
						td.textContent = arr[0];
						if(arr[1]){
							const img = document.createElement("img");
							img.src = arr[1];
							td.append(img);
						}
						td.dataset.truenum = arr[2]
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[5];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[3];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						td.textContent = arr[4];
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						const num = Number.parseFloat(arr[4] / arr[3]);
						if(Number.isNaN(num)){
							td.textContent = "";
							td.dataset.truenum = 0;
						}else{
							td.textContent = num.toFixed(2);
						}
						tr.append(td);
					}
					{
						const td = document.createElement("td");
						const num = Number.parseFloat(arr[4] / arr[5]);
						if(Number.isNaN(num)){
							td.textContent = "";
							td.dataset.truenum = 0;
						}else{
							td.textContent = num.toFixed(2);
						}
						tr.append(td);
					}
				});
			}
			section.append(sum_table);
			section.append(data_table);
		},
		
	},
	show_expansion: function(){
		this.popstate_search();
	},
	init_function: function(){
		document.getElementById("FormPlayerDataSubmit").addEventListener("click", this.click_search.bind(this));
	},
});
new PageData({
	id: "AllPlayerData",
	headerText: "全体のデータ",
	body: (() => {
		const fragment = document.createDocumentFragment();
		return fragment;
	})(),
	functions: {
	},
	show_expansion: function(){
	
	},
	init_function: function(){
	},
});
new PageData({
	id: "MissionAllData",
	headerText: "ミッションデータ",
	body: (() => {
		const fragment = document.createDocumentFragment();
		return fragment;
	})(),
	functions: {
	},
	show_expansion: function(){
	
	},
	init_function: function(){
	},
});







/*件数チェック用
const textarea = document.createElement("textarea");
let putData = [];
for(const [mission_id, mission_data] of Object.entries(Missions)){
	putData.push(mission_id);
}
putData = putData.sort();
textarea.value = putData.join("\n");
document.body.append(textarea);
*/


document.getElementById("ButtonCation").addEventListener("click", () => {
	const str1 = `
●データを取得した最終時刻は08:50辺りなので、それ以降にクリアしたプレイヤーはデータに含まれていません。
●プレイヤー名は各シーズン最終日当時のものです。
●獲得epは補正値無しのものです。
●小数は小数点以下2位を四捨五入しています。
`;
	const str2 = `
●作った人：魚頭男
●当コンテンツはMSO様より公認を受けていない非公認のものです。
●当コンテンツについてMSO様にお問い合わせを絶対にしないでください。
●問題などありましたら直ちに公開を取りやめいたします。
`;
	alert(str1);
	alert(str2);
});

Control.popstate();

})();
  </script>
</html>
