<html>
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width">
		<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
		<title>MSO_早い者勝ちイベントデータ</title>
	</head>
	<style>
:root{
	--headerHeight: 2ch;
}
*{
	font-size: 16px;
	background-color: #fff;
}
@media (prefers-color-scheme: dark) {
	*{
		background-color: #181a1b;
	}
	*:not(a){
		color: #c8c3bc;
	}
	a:not(:visited){
		color: #69a6d5;
	}
}
body{
	font-family: Open Sans, sans-serif;
	max-width: 70ch;
	margin: auto;
	padding: 0px;
	font-size: 1.10em;
	line-height: 1.75;
	overflow-y: scroll;
}
input[type=checkbox] {
	transform: scale(1.5);
	margin: 1ch;
}
body > header{
	position: sticky;
	top: 0;
	z-index: 10;
	height: var(--HeaderHeight);
}
#NavSiteHeader{
	display: flex;
	justify-content: flex-start;
	align-items: center;
	gap: 1ch;
	border-bottom: solid 2px #888;
}
#NavSiteHeader > h1 > a{
	text-decoration: none;
}
main{
	padding: 0em 1em 3em 1em;
/*
	overflow-x: auto;
*/
}
a{
	text-decoration: none;
}
a:not(:visited){
	color: #337ab7;
}
table {
	border-collapse: collapse;
	margin: 5ch 0ch;
	width: 100%;
	border-top: solid 1px #444;
/*
	white-space: pre;
*/
}
td, th {
/*
	border-right: dashed 1px #888;
	border-left: dashed 1px #888;
*/
	border-bottom: solid 1px #444;
	padding: 0.5ch 1ch;
}
img {
	width: 2.0ch;
}
label,
button{
	cursor: pointer;
}
table > caption:nth-of-type(1){
	caption-side: top;
}
table > caption:nth-of-type(2){
	caption-side: bottom;
}
table > caption:nth-of-type(2) > button{
/*captionをflexにするとうまくいかない…*/
	width: 50%;
	margin: 0px;
}
main > article:not(.sc){
	display: none;
}
main > article:not([id=toppage]) > section{
	display: flex;
	flex-direction: column;
}
main > article:not([id=toppage]) > section:not(.sc2){
	display: none;
}
.active {
	background-color: #F84;
}
.sortTable th {
	border: outset 3px #888;
	cursor: pointer;
}
.sortTable th:active {
	border-style: inset;
}
main > article > section > table > tbody{
	vertical-align: baseline;
}
.buttonOpenConfigShowTableCol{
	margin: 0em 1em;
}
dialog > article > ul {
	list-style: none;
	padding: 0px;
}
dialog > article > ul > li > label{
	display: flex;
	align-items: baseline;
	
}
dialog > article > ul > li > label > input {
	width: 2ch;
	flex: none;
}
dialog > article > ul > li > label > strong {
	margin-right: 1em;
	width: 10ch;
	display: inline-block;
	flex: none;
}
:where(#ArticlePlayerData, #ArticleMissionData) > form{
	display: flex;
}
dialog {
	margin: auto;
	height: 80vh;
	padding: 0px;
}
dialog > article {
	height: 85%;
	overflow-y: scroll;
	padding: 2ch;
	margin: 0px;
	box-sizing: border-box;
}
dialog > footer {
	height: 15%;
	padding: 1ch;
	box-sizing: border-box;
	display: flex;
}
dialog > footer > button{
	width: 100%;
}
a[target=_blank]:after {
	content: "↗️ ";
	justify-content: center;
	align-items: center;
	margin: 0px 0.5ch;
	vertical-align: middle;
}
#sorting_bg{
	position: fixed;
	z-index: 100;
	top: 0px;
	left: 0px;
	background-color: rgba(0, 0, 0, 0.2);
	width: 100%;
	height: 100%;
	display: none;
	align-items: center;
	justify-content: center;
	font-size: 3ch;
}
#sorting_bg.isShow{
	display: flex;
}
#ArticleAllData table ul {
	margin: 0px;
	padding: 0px;
	list-style: none;
}
#ArticleAllData table ul > li {
	white-space: pre;
	height: 2.5ch;
}

#menu {
	position: fixed;
	transition: width 0.5s;
	left: 0px;
	height: 100%;
	width: 0px;
	display: flex;
	background-color: transparent;
	z-index: 10;
}
#menu:has(> #menucontent.open) {
	width: 100%;
}
#menucontent {
	padding-bottom: 10em;
	
	transition: grid-template-columns 0.3s ease-out;
	grid-template-columns: 0fr;
	overflow-x: hidden;
	white-space: nowrap;
	display: flex;
	flex-direction: column;
}
#menucontent.open {
	grid-template-columns: 1fr;
}
#menucontent > * {
	padding: 1em 3em 1em 1em;
	border: none;
	border-bottom: solid 2px #444;
	text-align: left;
	line-height: 1.75;
}
#menucontent > *:first-child{
	border-top: solid 2px #444;
}
#menuback{
	background-color: rgba(0, 0, 0, 0.2);
	flex: 1;
}
#menuopener{
	border: none;
	font-size: 2.5em;
	padding: 0px;
	padding: 0px 16px;
}
/*
@media screen and (min-width: 1000px) {
	#menu{
		width: 100% !important;
	}
	#menucontent {
	  grid-template-columns: 1fr !important;
	}
	#menuback{
		display: none;
	}
	#menuopener{
		display: none;
	}
	body{
		margin-right: 0px;
	}
}
*/

#configDataFilter fieldset{
	column-count: 2;
}
#configDataFilter fieldset > label{
	display: block;
}
#AllData_B01 td > span{
	position: sticky;
	top: calc(var(--headerHeight) + 5ch);
}
#NavSiteHeader_shortcuts{
	margin-left: auto;
	margin-right: 1ch;
	display: flex;
	gap: 1ch;
}
#NavSiteHeader_shortcuts > button{
	padding: 1ch;
}

:where(dialog)::backdrop {
	background: oklch(0% 0 0 / 0.3);
}
/*
:where(dialog),
:where(dialog)::backdrop {
	opacity: 0;
	transition: opacity 300ms ease-out, display 300ms allow-discrete, overlay 300ms allow-discrete;
}
:where(dialog[open]),
:where(dialog[open])::backdrop {
	opacity: 1;
}
@starting-style {
	:where(dialog[open]),
	:where(dialog[open])::backdrop {
		opacity: 0;
	}
}
*/
#SiteTips ul{
	list-style: none;
}
#SiteTips ul > li {
	padding: 1ch 3vw;
	text-indent: -2em;
}
#SiteTips ul > li > dl{
	margin-left: 1em;
	text-indent: -1em;
}
#SiteLinks dt{
	text-indent: -2em;
	margin-left: 2em;
}
#SiteLinks dl{
	margin-bottom: 2em;
}
#toppage {
	margin: 0px 3vw;
	margin-top: 10vh;
}
#toppage hr{
	margin: 2em 0em;
}
#toppage > section p {
	text-indent: -2em;
	margin-left: 2em;
}
.tableDetail {
	margin: 0px;
	margin-left: auto;
	grid-template-columns: [key] 1fr [value] minmax(7ch, min-content);
	gap: 0px;
	display: grid;
}
.tableDetail > dt:after {
	content: "：";
}
.tableDetail > dt {
	grid-column: key;
	text-align: right;
}
.tableDetail > dd {
	grid-column: value;
	margin-left: 0px;
	text-align: right;
}
u{
	color: #F00;
	cursor: pointer;
}
	</style>
	<body>
		<header>
			<nav id="NavSiteHeader">
				<button id="menuopener" type="button">≡</button>
				<h1><a href="./main.htm" target>MSO_早い者勝ちデータ</a></h1>
				<div id="NavSiteHeader_shortcuts">
					<button type="button" onClick="document.getElementById('buttonOpenDataFilter').click();">🧽 </button>
					<button type="button" onClick="document.getElementById('buttonSiteConfig').click();">⚙️ </button>
				</div>
			</nav>
		</header>
		<nav id="menu">
			<div id="menucontent">
<!--
リロードするならこっち
				<a href="./main.htm" target>🏠️トップ</a>
-->
				<a href="./main.htm">🏠️トップ</a>
				<button type="button" id="buttonOpenDataFilter">🧽 絞り込み</button>
				<button type="button" id="buttonSiteConfig">⚙️ 設定</button>
				<button type="button" id="buttonSiteTips">💡 Tips</button>
				<button type="button" id="buttonSiteLinks">🔗 リンク集</button>
			</div>
			<div id="menuback">
			</div>
		</nav>
		<main id="MainContent">
			<article id="toppage">
				<section>
					<h2>ℹ️当サイトについて</h2>
					<p>🔵　<a href="https://minesweeper.online/ja/" target="_blank" rel="noopener noreferrer">Minesweeper.Online</a>さんの早い者勝ちイベントのデータを集めたものです。</p>
					<p>🟡　当コンテンツはMSO様より公認を受けていない非公認のものです。</p>
					<p>🟡　当コンテンツについてMSO様にお問い合わせを絶対にしないでください。<br/>お問い合わせは<a href="https://minesweeper.online/ja/player/16842796" target="_blank" rel="noopener noreferrer">魚頭男</a>へお願いします。</p>
					<p>🟡　問題などありましたら直ちに公開を取りやめいたします。</p>
				</section>
				<hr>
<!--
				<section>
					<h2>✨️ 展望</h2>
					<p>🔵　ページをブクマする（当サイト内で）。</p>
					<p>🔵　ページを共有しやすくする。</p>
					<p>🔵　匿名化する。</p>
					<p>🔵　全体のデータの拡充。</p>
				</section>
				<hr>
-->
				<section>
					<h2>🆙更新履歴</h2>
					<aside>
						<h3>2025/08/25</h3>
						<p>🔵　S116に対応しました（プレ）。
							<ul>
								<li>レベルが「☠」であるクエスト</li>
								<li>PvPのクエスト</li>
							</ul>
						</p>
					</aside>
					<aside>
						<h3>2025/05/29</h3>
						<p>🔵　メニューに<button onClick='document.getElementById("buttonSiteLinks").click();'>🔗リンク集</button>を追加しました。<br/>クレジットはこちらへ移行しました。</p>
						<p>🟢　サイトの表示内容の詳細を<button onClick='document.getElementById("buttonSiteTips").click();'>💡 Tips</button>へ転記しました。</p>
						<p>🔵　「さらに読み込む」の隣に「ぜんぶ読み込む」を置きました。<br/>それに伴って設定のさらに読み込む関連を削除しました。</p>
						<p>🔵　<a href="./main.htm?page=MissionData">ミッションデータ</a>のまとめに「平均人気度」の列を追加しました。</p>
						<p>🔵　表のソートを改良しました。<br/>以前よりも速くなりました。</p>
						<p>🔵　クエスト内容のソートを最適化しました。<br/>おおまかな種目ごとにソートされる、数字がちゃんとソートされる、といった具合です。</p>
						<p>🔵　タップした時に機能のある項目について、見た目をボタンに変更しました。</p>
						<p>🔴　それぞれの表の列の表示/非表示の設定が記憶されていなかったのを修正しました。</p>
					</aside>
					<aside>
						<h3>2025/05/21</h3>
						<p>🟢　コンテンツをメニューから選ぶように変更しました。<br/>（コンテンツを替えようと思った場合に元の位置にスクロールし直すのが面倒くさく感じたのがきっかけです。）</p>
						<p>🔵　<a href="./main.htm?page=AllData">全体のデータ</a>にコンテンツを追加しました。</p>
						<p>🔵　分類などを絞り込めるようにしました。<br/><button onClick='document.getElementById("buttonOpenDataFilter").click();'>🧽 絞り込み</button>より変更できます。</p>
						<p>🔵　ソート中に読み込み中である旨を表示するようにしました。</p>
						<p>🔵　ランキングなどのソートをあまりしないような表に関して、「さらに読み込む」ボタンを押して行を徐々に読み込む方式にしました。<br/>描画速度が上がります。<br/>なお、従来のように一気に読み込みたい場合は、<button onClick='document.getElementById("buttonSiteConfig").click();'>⚙️ 設定</button>より変更できます。</p>
						<p>🟢　クエスト内容の省略表記を一部変更しました。
							<ul>
								<li>コイン：300コイン → コイン300枚</li>
								<li>宝石：1サファイア → サファイア1個</li>
								<li>アリーナ：L4以上の速度アリーナ → 速度アリーナL4以上</li>
							</ul>
						</p>
					</aside>
					<aside>
						<h3>2025/05/10</h3>
						<p>🔵　ミッションデータに人気度を追加しました。</p>
						<p>🔵　注意書きを🔰READMEに変更し、内容を追記しました。</p>
						<p>🔵　ミッション詳細からカスタム盤面へ飛べるようにしました。<br/><a href="./main.htm?page=MissionData&mission_id=7168">こんな感じ</a>です。</p>
						<p>🔵　クエストの内容からミッション詳細へ飛べるようにしました。</p>
						<p>🟢　訪問済みのリンクを区別するようにデザインを変更しました。</p>
						<p>🔴　表をコピーしたときに、分類がコピーできていなかったのを修正しました。</p>
						<p>🟡　3156さんのマスタを導入しました。</p>
					</aside>
					<aside>
						<h3>2025/05/01</h3>
						<p>🔵　公開しました。<br/>でも宣伝を全然していないので限定公開です。</p>
					</aside>
				</section>
			</article>
		</main>
		<div id="sorting_bg">ソート中…<br/>しばらくお待ちください。</div>
	</body>
	<script>
(async()=> {
"use strict";


const SEASONS = {
	"S108": "https://minesweeper.online/img/candies/candy/528.svg?v4",
	"S112": "https://minesweeper.online/img/candies/egg/408.svg?v5",
	"S116": "https://minesweeper.online/img/candies/drink/468.svg?v5",
};

const SessionStorage = new class{
	#storagename;
	#datas;
	constructor(){
		this.#storagename = "_魚頭男_S004_datas";
/*
		window.addEventListener("beforeunload", this.save);
*/
		this.load();
	}
	get(key){
		return this.#datas[key];
	}
	set(key, value){
		return this.#datas[key] = value;
	}
	has(key){
		return !!this.#datas[key];
	}
	remove(key){
		delete this.#datas[key];
	}
	delete(){
		sessionStorage.removeItem(this.#storagename);
	}
	save(){
		const savedata = JSON.stringify(this.#datas);
		sessionStorage.setItem(this.#storagename, savedata);
	}
	load(){
		const loaddata = sessionStorage.getItem(this.#storagename);
		if(loaddata){
			this.#datas = JSON.parse(loaddata);
		}else{
			this.clear();
		}
	}
	clear(){
		this.#datas = {};
	}
};
const Wait = {
	waits : {},
	add(key){
		return new Promise((resolve) =>{
			this.waits[key] = resolve;
		});
	},
	release(key){
		this.waits[key]();
		delete this.waits[key];
	},
	time(sec){
		return new Promise((resolve) =>{
			setTimeout(function(){resolve();}, sec * 1000);
		});
	},
};
const Menu = new class{
	constructor(){
		this.menu = document.getElementById("menucontent");
		document.getElementById("menuopener").addEventListener("click", this.toggle.bind(this));
		document.getElementById("menuback").addEventListener("click", this.close.bind(this));
		this.menu.addEventListener("click", () => {
			if(event.target.tagName === "A"){
				this.close();
			}
		});
	}
	open(){
		this.menu.classList.add("open");
	}
	close(){
		this.menu.classList.remove("open");
	}
	toggle(){
		this.menu.classList.toggle("open");
	}
	add(dom){
		//絞り込みの前に追加する
		document.getElementById("buttonOpenDataFilter").before(dom);
/*
		this.menu.append(dom);
*/
	}
}

const IFURL = new class{	//InterFaceURL
	query = {
		get: (key, url = location) => {
			url = new URL(url);
			return url.searchParams.get(key);
		},
		set: (key, value, url = location) => {
			url = new URL(url);
			url.searchParams.set(key, value);
			return url;
		},
		delete: (key, url = location) => {
			url = new URL(url);
			url.searchParams.delete(key);
			return url;
		},
	}
	pushHistory = (url) => {
		history.pushState({}, "", url);
	}
	replaceHistory = (url) => {
		history.replaceState({}, "", url);
	}
}
class Dialog{
	constructor(param){
		param["opener"]?.addEventListener("click", () => {
			this.open();
		});
		this.dialog = this.#create();
	}
	#create(){
		const dialog = document.createElement("dialog");
		{
			const article = document.createElement("article");
			dialog.append(article);
		}
		{
			const footer = document.createElement("footer");
			dialog.append(footer);
			{
				const button = document.createElement("button");
				button.type = "button";
				button.textContent = "閉じる";
				button.addEventListener("click", () => {
					this.close();
				});
				footer.append(button);
			}
		}
		
		document.body.append(dialog);
		return dialog;
	}
	open(){
		this.dialog.showModal();
	}
	close(){
		this.dialog.close();
	}
}
function uniqueClassName(className, addDOM){
	const tars = document.querySelectorAll(`.${className}`);
	tars.forEach((tar) => tar.classList.remove(className));
	addDOM?.classList.add(className);
}
function getDateString(date){
	var YYYY = date.getFullYear().toString().padStart(4, '0');
	var MM = (date.getMonth() + 1).toString().padStart(2, '0');
	var DD = date.getDate().toString().padStart(2, '0');
	
	var HH = date.getHours().toString().padStart(2, '0');
	var mm = date.getMinutes().toString().padStart(2, '0');
  return `${YYYY}-${MM}-${DD} ${HH}:${mm}`;
}
function getHayaimogatiDate(date){
	return getDateString(new Date(date * 48000));
}

function sortTable(tar){
	if(tar === event){
		tar = event.target;
	}
	if(tar.tagName !== "TH"){
		return;
	}
	if(!tar.textContent){
		return;
	}
	
	const table = tar.closest("table");
	const ths = table.querySelectorAll(":scope > thead > tr > th");
	const thnum = Array.from(ths).findIndex((th) => th === tar) + 1;
	
	const tbody = table.querySelector(":scope > tbody");
	const tds = tbody.querySelectorAll(`:scope > tr > td:nth-child(${thnum})`);
	const datas = Array.from(tds).map((td, index) => {
		const str = td.dataset.truenum ?? td.textContent;
		const compstr = isNaN(str) ? str : Number(str);
		return [compstr, index];
	});
	tar.dataset.sorted = tar.dataset.sorted === "1" ? "-1" : "1";
	const kei = Number(tar.dataset.sorted);
	datas.sort((a, b) => {
		let s = 0;
		if(a[0] > b[0]){
			s = 1;
		}else if(a[0] < b[0]){
			s = -1;
		}else{
			s = 0;
		}
		return s * kei;
	});
	
	const trs = tbody.querySelectorAll(":scope > tr");
	datas.forEach((data) => {
		tbody.append(trs[data[1]]);
	});
}
function splitArray(arr, add){
/*
splitArray([1,2,3,4,5], 2) //=> [[1,2], [3,4], [5]]
*/
	const ra = [];
	let startnum = 0;
	let endnum = add;
	while(true){
		const sa = arr.slice(startnum, endnum);
		if(!sa.length){
			break;
		}
		ra.push(sa);
		startnum += add;
		endnum += add;
	}
	return ra;
}


async function getJSON(link){
	const response = await fetch(link);
	return response.json();
}


function getEP(level, rank){
	return RANK_EP[level][rank - 1] ?? level;
}
const full_reconstructFuncs = {
	"J0": function(x, y){
		return `${y}個の${JEMS[x]}を集める`;
	},
	"J1": function(x){
		return `ゲームの報酬で ${x} 個の宝石を集める`;
	},
	"J2": function(x){
		return `${x} 個の宝石を集める`;
	},
	"A0": function(x){
		return `${x} 枚のアリーナチケットを見つける`;
	},
	"A1": function(x){
		return `${x} アリーナコインを稼ぐ`;
	},
	"A2": function(x, y){
		return `L${y} ${ARENAS[x]} のアリーナをクリアする`;
	},
	"A3": function(x){
		return `L${x} 以上のレベルのアリーナをクリアする`;
	},
	"K0": function(x, y, z){
		return `サイズ ${x}x${y}/${z} のカスタムをクリアする`;
	},
	"P0": function(x){
		return `PvPモードで ${x} 回ゲームをクリアする`;
	},
	"H0": function(x, y){
		return `レベル  ${MODES[x]} のゲームをヒントなしで ${y} 回クリアする`;
	},
	"H1": function(x, y){
		return `レベル  ${MODES[x]} のゲームを ${y} 秒以内にクリアする`;
	},
	"H2": function(x, y){
		return `レベル  ${MODES[x]} のゲームをフラグなしで ${y} 回クリアする`;
	},
	"H3": function(x, y){
		return `レベル ${MODES[x]} のゲームを ${y} 回連続でクリアする`;
	},
	"H4": function(x, y, z){
		return `レベル ${MODES[x]} のゲームを効率${y}%以上で ${z} 回クリアする`;
	},
	"H5": function(x, y){
		return `レベル ${MODES[x]} のゲームを100回中 ${y} 回クリアする`;
	},
	"H6": function(x, y){
		return `レベル ${MODES[x]} のゲームを24時間以内に ${y} 回クリアする`;
	},
	"H7": function(x, y){
		return `レベル  ${MODES[x]} のゲームを ${y}回クリアする`;
	},
	"M0": function(x){
		return `${x} 名誉ポイントを稼ぐ`;
	},
	"M1": function(x){
		return `ゲームの報酬で ${x} コインを稼ぐ`;
	},
	"M2": function(x){
		return `${x} コインを稼ぐ`;
	},
	"M3": function(x){
		return `イベントポイントを${x}個集める`;
	},
}
const short_reconstructFuncs = {
	"J0": function(x, y){
		return `${JEMS[x]}${y}個`;
	},
	"J1": function(x){
		return `宝石${x}個（ゲーム報酬）`;
	},
	"J2": function(x){
		return `宝石${x}個`;
	},
	"A0": function(x){
		return `アリーナチケット${x}枚`;
	},
	"A1": function(x){
		return `アリーナコイン${x}枚`;
	},
	"A2": function(x, y){
		return `${ARENAS[x]}アリーナL${y}以上`;
	},
	"A3": function(x){
		return `任意のアリーナL${x}以上`;
	},
	"K0": function(x, y, z){
		return `カスタム${x}x${y}/${z}`;
	},
	"P0": function(x){
		return `PvP${x}回`;
	},
	"H0": function(x, y){
		return `${MODES[x]}ヒントなし${y}回`;
	},
	"H1": function(x, y){
		return `${MODES[x]}${y}秒以内`;
	},
	"H2": function(x, y){
		return `${MODES[x]}フラグなし${y}回`;
	},
	"H3": function(x, y){
		return `${MODES[x]}${y}連`;
	},
	"H4": function(x, y, z){
		return `${MODES[x]}効率${y}%以上${z}回`;
	},
	"H5": function(x, y){
		return `${MODES[x]}習熟${y}`;
	},
	"H6": function(x, y){
		return `${MODES[x]}${y}回（24時間以内）`;
	},
	"H7": function(x, y){
		return `${MODES[x]}${y}回`;
	},
	"M0": function(x){
		return `名誉${x}つ`;
	},
	"M1": function(x){
		return `コイン${x}枚（ゲーム報酬）`;
	},
	"M2": function(x){
		return `コイン${x}枚`;
	},
	"M3": function(x){
		return `イベントポイント${x}つ`;
	},
}
function getDecodeMissionDetail(code){
	const param = code.split("#");
	const codes = [param[0]];
	for(let i = 1; i <= 3; i++){
		let code = param[i] ?? "";
		code = code.padStart(4, "0");
		codes.push(code);
	}
	
	return [codes.join(""), short_reconstructFuncs[param["0"]](param["1"], param["2"], param["3"])];
}
function createTable(param){
	const tableClassName = `table${param["unityID"]}`;
	
	/*TABLEの列フィルターとなるDIALOG*/
	const dialogID = `dialog${param["unityID"]}`;
	let dialog = document.getElementById(dialogID);
	if(!dialog){
		const od = new class extends Dialog{
			constructor(){
				super({
					"opener": null,	/*あとで定義*/
				});
				this.#dialogAppend();
			}
			#dialogAppend(){
				const dialog = this.dialog;
				dialog.id = dialogID;
				dialog.addEventListener("close", () => {
					const inputs = dialog.querySelectorAll("input");
					inputs.forEach((input, index) => {
						SessionStorage.set(`${dialogID}${index}`, input.checked ?? input.value);
					});
					SessionStorage.save();
				});
				const style = document.createElement("style");
				document.body.append(style);
				let style_innerHTML = `
					.${tableClassName}{
						${param["style"]}
					}
				`;
				{
					const article = this.dialog.querySelector(":scope > article");
					const ul = document.createElement("ul");
					article.append(ul);
					param["THS"].forEach((TH, index) => {
						const li = document.createElement("li");
						ul.append(li);
						const label = document.createElement("label");
						li.append(label);
						const input = document.createElement("input");
						input.type = "checkbox";
						input.checked = SessionStorage.get(`${dialogID}${index}`) ?? TH["initShow"];
						label.append(input);
						const strong = document.createElement("strong");
						strong.textContent = TH["name"];
						label.append(strong);
						const span = document.createElement("span");
						span.innerText = TH["details"];
						label.append(span);
						
						style_innerHTML += `
							body:has(#${dialogID} > article > ul > li:nth-of-type(${index + 1}) > label > input:not(:checked)) .${tableClassName} > :is(thead, tbody) > tr > :is(th, td):nth-of-type(${index + 1}){
								display: none;
							}
							.${tableClassName} > :is(thead, tbody) > tr > td:nth-of-type(${index + 1}) {
								${TH["style"]}
							}
						`;
					});
					style.innerHTML = style_innerHTML;
				}
				{
					const footer = this.dialog.querySelector(":scope > footer");
				}
			}
		};
		dialog = od.dialog;
	}
	
	/*TABLE*/
	const table = document.createElement("table");
	table.classList.add(tableClassName);
	{
		const caption = document.createElement("caption");
		caption.innerHTML = param["caption_text"];
		table.append(caption);
		{
			const button = document.createElement("button");
			button.type = "button";
			button.textContent = "⚙️";
			button.classList.add("buttonOpenConfigShowTableCol");
			button.addEventListener("click", () => {
				dialog.showModal();
			});
			caption.append(button);
		}
	}
	{
		const thead = document.createElement("thead");
		table.append(thead);
		if(param["isSortable"]){
			table.classList.add("sortTable");
			thead.addEventListener("click", async() => {
				const bg = document.getElementById("sorting_bg");
				bg.classList.add("isShow");
				await new Promise((resolve) => {
					const evt = event.target;
					setTimeout(() => {
						sortTable(evt);
						resolve();
					});
				});
				bg.classList.remove("isShow");
			});
		}
		{
			const tr = document.createElement("tr");
			thead.append(tr);
			param["THS"].forEach((TH) => {
				const th = document.createElement("th");
				th.textContent = TH["name"];
				tr.append(th);
			});
		}
	}
	{
		const tbody = document.createElement("tbody");
		table.append(tbody);
		param["createTbodyFunction"](tbody, param);
	}
	
	return table;
}
function getNumberLevel(level){
	const lev = Number(level.match(/\d+/)[0]);
	if(level.includes("E")){
		return lev * 3;
	}
	if(level.includes("☠")){
		return lev * 9;
	}
	return lev;
}
function getDivision(num1, num2){
	const n1 = Number(num1);
	const n2 = Number(num2);
	if(isNaN(n2)){
		return [NaN, ""];
	}
	const num = Number.parseFloat(n1 / n2);
	if(Number.isNaN(num)){
		return [0, ""];
	}else{
		const n = num.toFixed(2);
		return [n, n];
	}
}
function calcTrimAverage(arr, per = 5){
	const nums = arr.concat();
	const tcount = Math.floor(nums.length / Math.floor(100 / per));
	if(tcount > 0){
		nums.sort();
		for(let i = 0; i < tcount; i++){
			nums.pop();
			nums.shift();
		}
	}
	const sum = nums.reduce((sum, num) => sum + num, 0);
	const len = nums.length;
	return getDivision(sum, len);
}
function appendMoreReadCaption(morereadId, table){
	if(document.getElementById(morereadId)){
		return;
	}
	const caption = document.createElement("caption");
	caption.id = morereadId;
	table.append(caption);
	{
		const button = document.createElement("button");
		button.type = "button";
		button.textContent = "さらに読み込む";
		button.addEventListener("click", () => {
			Wait.release(morereadId);
		});
		caption.append(button);
	}
	{
		const button = document.createElement("button");
		button.type = "button";
		button.textContent = "ぜんぶ読み込む";
		button.addEventListener("click", () => {
			this[morereadId] = true;
			Wait.release(morereadId);
		});
		caption.append(button);
	}
}

function setPlayerMissions(){
	if(Object.keys(PlayerMissions).length){
		return;
	}
	Object.entries(Missions).forEach(([mid, obj]) => {
		obj["Ws"].forEach((pid, index) => {
			if(!PlayerMissions[pid]){
				PlayerMissions[pid] = [];
			}
			const o = {};
			o["L"] = obj["L"];
			o["level"] = getNumberLevel(o["L"]);
			o["D"] = obj["D"];
			o["I"] = obj["I"];
			o["R"] = index + 1;
			o["P"] = getEP(o["level"], o["R"]);
			o["T"] = obj["T"];
			o["MissionID"] = mid;
			PlayerMissions[pid].push(o);
		});
		
	});
}
function getChallengableMissions(){
	const MissionLevelFilters = Filter.nowFilter.filter((fil) => fil[0] === "E");
	let f = 0;
	const fils = [
		MissionLevelFilters.includes("EOFF"),
		MissionLevelFilters.includes("EON"),
		MissionLevelFilters.includes("EDON"),
	];
	if(fils[0] && fils[1] && fils[2]){
		f = 2;
	}
	if(!fils[0] && fils[1] && fils[2]){
		f = 1;
	}
	if(fils[0] && !fils[1] && !fils[2]){
		f = 1;
	}
	if(f === 0){
		return NaN;
	}
	const maxMissions = Object.keys(Missions).length;
	return maxMissions / f
}
function getToubaiLine(level){
	if(RANK_EP[level].at(-1) === level){
		return RANK_EP[level].length
	}else{
		return NaN;
	}
}
function createPie(param){
	const canvas = document.createElement("canvas");
	const config = {
//		type: "doughnut",
		type: "pie",
		data: {
			labels: param["data_labels"],
			datasets: [
				{
//					label: "プレイヤー数",
					data: param["data_datasets_data"],
					backgroundColor: param["data_datasets_backgroundColor"],
					borderColor: param["data_datasets_borderColor"],
					borderWidth: 8,
					hoverOffset: 30,
				},
			],
		},
		/*
		円グラフのそれぞれのパイに割合を表示する
		https://nerino.seesaa.net/article/chart6.html
		Chart.js(v4) 円グラフに値と割合、中心に合計値を表示: Nerinoのブログ
		*/
		plugins: [{
			afterDatasetsDraw: function(chart, args, options) {
				const metas = chart.getSortedVisibleDatasetMetas();
				// グラフごとの処理
				metas.forEach((meta, i) => {
					if(meta.data.length && 
					  (meta.type === 'pie' || meta.type === 'doughnut')){
						const dataset = chart.data.datasets[meta.index];
						const dataKey = dataset.parsing?.key ?? chart.options.parsing?.key;
						const elements = meta.data;
						// フォント設定
						const ctx = chart.ctx;
						ctx.save();
						ctx.font = Chart.defaults.font;
						ctx.fillStyle = Chart.defaults.color;
						ctx.strokeStyle = 'white';
						ctx.lineWidth = 4;
						ctx.textAlign = 'center';
						ctx.textBaseline = 'middle';
						// 円グラフの円弧ごとに値を表示
						elements.forEach((el, i) => {
							if(el.circumference){
								const data = dataset?.data[i][dataKey] ?? dataset.data[i];
								const par = Math.floor(data / meta.total * 100);
								const rdist = el.innerRadius + (el.outerRadius - el.innerRadius) * 0.8;
								const eangle = (el.startAngle + el.endAngle) / 2;
								const pos = {
									x: el.x + rdist * Math.cos(eangle),
									y: el.y + rdist * Math.sin(eangle),
								};
								const dataLabel = [data, `(${par}%)`];
								ctx.strokeText(dataLabel[0], pos.x, pos.y);
								ctx.strokeText(dataLabel[1], pos.x, pos.y + 16);
								ctx.fillText(dataLabel[0], pos.x, pos.y);
								ctx.fillText(dataLabel[1], pos.x, pos.y + 16);
							}
						});
		/*
						const dataValue = `${meta.label}\n　${meta.total}`;
						ctx.fillText(dataValue, elements[0].x, elements[0].y - ((metas.length - 1) / 2 - i) * 20);
		*/
						ctx.restore();
					}
				})
			}
		}],
		options: {
			layout: {
				padding: {
					left: 0,
					right: 0,
					top: 0,
					bottom: 0,
				}
			},
			plugins: {
				legend: {
					labels: {
						font: {
							size: 16,
						},
					},
					onClick: function(){
						return;	//デフォルトだと、クリック時にフィルターが掛かるが、その機能を消す
					},
				},
				title: {
					display: true,
					text: param["options_plugins_title_text"],
					font: {
						size: 16,
					},
				},
			},
//			cutout: "30%",
			cutout: 0,
			animation: {
//				animateRotate: false,	/*回転アニメーション*/
			},
		},
	};
	const chart = new Chart(canvas, config);
	/*
			lineChart.data.datasets[0].data[0] = 50;
			lineChart.update();
	*/
	/*
	lineChart.render({
		duration: 800,
		lazy: false,
		easing: 'easeOutBounce'
	});
	*/

	//		lineChart.destroy();
	return canvas;
}


const Config = new class extends Dialog{
	constructor(){
		super({
			"opener": document.getElementById("buttonSiteConfig"),
		});
		this.#dialogAppend();
	}
	#dialogAppend(){
		const dialog = this.dialog;
		dialog.id = "configSiteViewing";
		dialog.addEventListener("close", () => {
			const inputs = dialog.querySelectorAll("input");
			inputs.forEach((input) => {
				SessionStorage.set(input.id, input.checked ?? input.value);
			});
			SessionStorage.save();
		});
		{
			const article = dialog.querySelector(":scope > article");
			{
				const fieldset = document.createElement("fieldset");
				fieldset.id = "filterSeason";
				article.append(fieldset);
				const legend = document.createElement("legend");
				legend.textContent = "設定";
				fieldset.append(legend);
			}
		}
		{
			const footer = dialog.querySelector(":scope > footer");
		}
	}
}
const Tips = new class extends Dialog{
	constructor(){
		super({
			"opener": document.getElementById("buttonSiteTips"),
		});
		this.#dialogAppend();
	}
	#dialogAppend(){
		const dialog = this.dialog;
		dialog.id = "SiteTips";
		{
			const article = dialog.querySelector(":scope > article");
			article.innerHTML = `
<section>
	<h2>🗂️ 取得元のデータについて</h2>
	<ul>
		<li>🔵　S116の20250805 21:00～20250805 23:00のミッションはありません<br>（MSOのサーバーダウンによるものです）。</li>
	</ul>
</section>

<section>
	<h2>🗂️ 表示内容について</h2>
	<ul>
		<li>🔵　データを取得した最終時刻は08:50辺りなので、それ以降にクリアしたプレイヤーはデータに含まれていません。</li>
		<li>🔵　プレイヤー名は各シーズン最終日当時のものです。</li>
		<li>🔵　獲得EPは補正値無しのものです。</li>
		<li>🔵　小数は小数点2位未満を四捨五入しています。</li>
		<li>🔵　☠のクエストのレベルは、大元は「L☠」となっていますが、本サイトでは「挑戦アクティビティ÷9」の数値を入れています。</li>
	</ul>
</section>

<section>
	<h2>🗂️ サイトの機能について</h2>
	<ul>
		<li>🟢　表の見出しをタップすると並び替えできます。</li>
		<li>🟢　<button onClick='document.getElementById("buttonOpenDataFilter").click();'>🧽 絞り込み</button>内のそれぞれの設定のタイトル（「分類🎁」など）をタップするとすべてのチェックを反転します。</li>
		<li>🟡　<button onClick='document.getElementById("buttonOpenDataFilter").click();'>🧽 絞り込み</button>内でそれぞれの設定を全くチェックしなかった場合、次のようなチェックがされます。
			<dl>
				<dt>シーズン🗓️</dt><dd>最新のシーズンだけチェックされます。</dd>
				<dt>分類🎁</dt><dd>すべての分類がチェックされます。</dd>
				<dt>クエストのレベル⚡️</dt><dd>通常・エリート・☠のすべてがチェックされます。</dd>
			</dl>
		</li>
		<li>🟡　<button onClick='document.getElementById("buttonSiteConfig").click();'>⚙️ 設定</button>内の各設定は、そのタブを閉じるまで記憶されます<br/>（sessionStorage）。</li>
	</ul>
</section>
				
			`;
		}
		{
			const footer = dialog.querySelector(":scope > footer");
		}
	}
}
const Links = new class extends Dialog{
	constructor(){
		super({
			"opener": document.getElementById("buttonSiteLinks"),
		});
		this.#dialogAppend();
	}
	#dialogAppend(){
		const dialog = this.dialog;
		dialog.id = "SiteLinks";
		{
			const article = dialog.querySelector(":scope > article");
			article.innerHTML = `
<address>
	<dl>
		<dt>🐟️　<a href="https://minesweeper.online/ja/player/16842796" target="_blank" rel="noopener noreferrer">魚頭男</a></dt>
		<dd>当ページを作りました。お問い合わせはこちらまでお願いします。</dd>
		<dt>🎲　<a href="https://minesweeper.online/ja/player/11151489" target="_blank" rel="noopener noreferrer">3156(Shima)</a></dt>
		<dd>マスタのご提供ありがとうございます！（<a href="https://docs.google.com/spreadsheets/d/1qk5b1yZ7NBL2jD9-RtUVFMSyEVRhDyIpJXTGfR6a1go/edit?gid=2078390436#gid=2078390436" target="_blank" rel="noopener noreferrer">EPと順位</a>）</dd>
	</dl>
	
	<dl>
		<dt>💣️　<a href="https://minesweeper.online/ja/" target="_blank" rel="noopener noreferrer">マインスイーパー｜Minesweeper Online</a></dt>
		<dd>いつも楽しくプレイしています。</dd>
		<dt>📈　<a href="https://www.chartjs.org/docs/latest/" target="_blank" rel="noopener noreferrer">Chart.js | Chart.js</a></dt>
		<dd>グラフはこのモジュールを使って描画しています。</dd>
	</dl>
</address>
			`;
		}
		{
			const footer = dialog.querySelector(":scope > footer");
		}
	}
}
//========================================

const IMG_DOMAIN = "https://minesweeper.online/img/candies/";

const MSO_CONSTANT = await getJSON("./common/mso_constant.json");
const JEMS = MSO_CONSTANT["JEMS"];
const ARENAS = MSO_CONSTANT["ARENAS"];
const MODES = MSO_CONSTANT["MODES"];

const IMG = await getJSON("./common/img_data.json");
const EVENTPOINT_KIND_NAMES = IMG["EVENTPOINT_KIND_NAMES"];
const EVENTPOINT_KIND_IMAGE_HASHS = IMG["EVENTPOINT_KIND_IMAGE_HASHS"];

const RANK_EP = await getJSON("./common/hayaimonogati_LevelRankEp.json");

const Filter = new class extends Dialog{
	constructor(){
		super({
			"opener": document.getElementById("buttonOpenDataFilter"),
		});
		this.nowFilter = this.getFilter();
		this.#dialogAppend();
		this.setFilter();
	}
	getFilter(){
		const query = IFURL.query.get("filter");
		if(query){
			return query.split("-");
		}else{
			return [];
		}
	}
	setFilter(){
		const fil = this.getQuery();
		IFURL.replaceHistory(IFURL.query.set("filter", fil));
	}
	#dialogAppend(){
		const dialog = this.dialog;
		dialog.id = "configDataFilter";
		dialog.addEventListener("close", this.setConfigs.bind(this));	//エスケープによって閉じたときにも変更を初期化する
		{
			const article = dialog.querySelector(":scope > article");
			{
				const fieldset = document.createElement("fieldset");
				fieldset.id = "filterSeason";
				article.append(fieldset);
				const legend = document.createElement("legend");
				fieldset.append(legend);
				const button = document.createElement("button");
				button.type = "button";
				button.textContent = "シーズン🗓️";
				button.addEventListener("click", () => {
					fieldset.querySelectorAll("input[type=checkbox]").forEach((chk) => {
						chk.checked = !chk.checked;
					});
				});
				legend.append(button);
				
				Object.entries(SEASONS).forEach(([season, src]) => {
					const label = document.createElement("label");
					fieldset.append(label);
					const input = document.createElement("input");
					input.type = "checkbox";
					input.dataset.key = season;
					input.checked = this.nowFilter.includes(season);
					label.append(input);
					const img = document.createElement("img");
					img.src = src;
					label.append(img);
					const span = document.createElement("span");
					span.textContent = season;
					label.append(span);
				});
				/*何も✓されていない場合は最新シーズンをあらかじめ選択する*/
				const chks = fieldset.querySelectorAll("input[type=checkbox]");
				if(!Array.from(chks).some((chk) => chk.checked)){
					const chk = Array.from(chks).at(-1);
					chk.checked = true;
					this.nowFilter.push(chk.dataset.key);
				}
			}
			{
				const fieldset = document.createElement("fieldset");
				fieldset.id = "filterKind";
				article.append(fieldset);
				const legend = document.createElement("legend");
				fieldset.append(legend);
				const button = document.createElement("button");
				button.type = "button";
				button.textContent = "分類🎁";
				button.addEventListener("click", () => {
					fieldset.querySelectorAll("input[type=checkbox]").forEach((chk) => {
						chk.checked = !chk.checked;
					});
				});
				legend.append(button);
				
				Object.entries(EVENTPOINT_KIND_NAMES).forEach(([key, value]) => {
					const label = document.createElement("label");
					fieldset.append(label);
					const input = document.createElement("input");
					input.type = "checkbox";
					input.dataset.key = key;
					input.checked = this.nowFilter.includes(key);
					label.append(input);
					const span = document.createElement("span");
					span.textContent = value;
					label.append(span);
				});
				/*何も✓されていない場合はすべての種別をあらかじめ選択する*/
				const chks = fieldset.querySelectorAll("input[type=checkbox]");
				if(!Array.from(chks).some((chk) => chk.checked)){
					chks.forEach((chk) => {
						chk.checked = true;
						this.nowFilter.push(chk.dataset.key);
					});
				}
			}
			{
				const fieldset = document.createElement("fieldset");
				fieldset.id = "filterLevel";
				article.append(fieldset);
				const legend = document.createElement("legend");
				fieldset.append(legend);
				const button = document.createElement("button");
				button.type = "button";
				button.textContent = "クエストのレベル⚡️";
				button.addEventListener("click", () => {
					fieldset.querySelectorAll("input[type=checkbox]").forEach((chk) => {
						chk.checked = !chk.checked;
					});
				});
				fieldset.append(legend);
				const levels = {
					"EOFF": "通常",
					"EON": "エリート",
					"EDON": "☠",
				};
				Object.entries(levels).forEach(([key, value]) => {
					const label = document.createElement("label");
					fieldset.append(label);
					const input = document.createElement("input");
					input.type = "checkbox";
					input.dataset.key = key;
					input.checked = this.nowFilter.includes(key);
					label.append(input);
					const span = document.createElement("span");
					span.textContent = value;
					label.append(span);
				});
				legend.append(button);
				
				/*何も✓されていない場合はすべてのレベルをあらかじめ選択する*/
				const chks = fieldset.querySelectorAll("input[type=checkbox]");
				if(!Array.from(chks).some((chk) => chk.checked)){
					chks.forEach((chk) => {
						chk.checked = true;
						this.nowFilter.push(chk.dataset.key);
					});
				}
			}
		}
		{
			const footer = dialog.querySelector(":scope > footer");
			footer.querySelector(":scope > button").remove();	/*デフォルトを変更する*/
			{
				const button = document.createElement("button");
				button.type = "button";
				button.textContent = "変更せずに閉じる";
				button.addEventListener("click", () => {
					this.close();
				});
				footer.append(button);
			}
			{
				const button = document.createElement("button");
				button.type = "button";
				button.textContent = "絞り込む";
				button.addEventListener("click", () => {
					this.changeConfigs();
					const url = IFURL.query.set("filter", this.getQuery())
					location.href = url;
				});
				footer.append(button);
			}
		}
	}
	setConfigs(){
		this.dialog.querySelectorAll("input[type=checkbox]").forEach((chk) => {
			chk.checked = this.nowFilter.includes(chk.dataset.key);
		});
	}
	changeConfigs(){
		const sa = [];
		this.dialog.querySelectorAll("input[type=checkbox]:checked").forEach((chk) => {
			sa.push(chk.dataset.key);
		});
		this.nowFilter = sa;
	}
	setHref(article){
		const ancs = article.querySelectorAll("a");
		const fil = this.getQuery();
		ancs.forEach((anc) => {
			anc.href = IFURL.query.set("filter", fil, anc.href);
		});
	}
	getQuery(){
		return this.nowFilter.join("-");
	}
}

let Missions = null;
let Players = null;
let SeasonKindImgs = {};	/*サマリに使う画像*/

let PlayerMissions = {};	/*プレイヤー→ミッション、論理ファイル的扱い*/


async function setUseData(){
	/*データ読み込み*/
	Missions = {};
	Players = {};
	const seasons = Filter.nowFilter.filter((fil) => fil[0] === "S");
	for(let i = 0; i < seasons.length; i++){
		const season = seasons[i];
		const data = await getJSON(`./${season}/data.json`);
		Object.assign(Missions, data["Ms"]);
		Object.assign(Players, data["Ps"]);
	}
	Filter.setHref(Menu.menu);
	
	SeasonKindImgs = (() => {
		const ro = {};
		const basesrc = SEASONS[seasons[0]].replace(/\/\d.+/, "");
		for(const kind of Object.keys(EVENTPOINT_KIND_NAMES)){
			for(const [src, key] of Object.entries(EVENTPOINT_KIND_IMAGE_HASHS)){
				if(src.startsWith(basesrc) && key === kind){
					ro[kind] = src;
				}
			}
		}
		return ro;
	})();
	{
		/*絞り込み内の分類に画像をつける*/
		const chks = document.querySelectorAll("#filterKind > label > input[type=checkbox]");
		chks.forEach((chk) => {
			const img = document.createElement("img");
			img.src = SeasonKindImgs[chk.dataset.key];
			chk.after(img);
		});
	}
	
	/*使わないデータ削除*/
	const MissionLevelFilters = Filter.nowFilter.filter((fil) => fil[0] === "E");
	if(MissionLevelFilters.length === document.querySelectorAll("#filterLevel > label > input[type=checkbox]").length){
		
	}else{
		const fils = [
			MissionLevelFilters.includes("EOFF"),
			MissionLevelFilters.includes("EON"),
			MissionLevelFilters.includes("EDON"),
		];
		Object.entries(Missions).forEach(([id, data]) => {
			const cha = data["L"].at(-1);
			if(cha === "E"){
				if(!fils[1]){
					delete Missions[id];
				}
				return;
			}
			if(cha === "☠"){
				if(!fils[2]){
					delete Missions[id];
				}
				return;
			}
			if(!fils[0]){
				delete Missions[id];
				return;
			}
		});
	}
	const kindFilters = Filter.nowFilter.filter((fil) => !/[E|S]/.test(fil[0]));
	if(kindFilters.length === document.querySelectorAll("#filterKind > label > input[type=checkbox]").length){
	}else{
		Object.entries(Missions).forEach(([id, data]) => {
			const src = `${IMG_DOMAIN}${data["I"]}`;
			const kind = EVENTPOINT_KIND_IMAGE_HASHS[src];
			if(!kindFilters.includes(kind)){
				delete Missions[id];
				return;
			}
		});
	}
	Object.keys(SeasonKindImgs).forEach((kind) => {
		if(!kindFilters.includes(kind)){
			delete SeasonKindImgs[kind];
		}
	});
}

//========================================
const PageMove = new class{
	constructor(){
		this.nowPage = null;
		window.addEventListener("popstate", this.popstate);
		document.addEventListener("click", () => {
			const tar = event.target;
			if(tar.tagName !== "A"){
				return;
			}
			if(tar.hasAttribute("target")){
				return;
			}
			event.preventDefault();
			IFURL.pushHistory(tar.href);
			this.popstate();
		});
	}
	popstate = () => {
		const page = IFURL.query.get("page");
		if(Page[page]){
			if(this.nowPage !== page){
				Page[page].show();
			}
			this.nowPage = page;
			Page[page].show_expansion();
		}else{
			uniqueClassName("sc", document.getElementById("toppage"));
			uniqueClassName("active", Menu.menu.querySelector(":scope > a:nth-of-type(1)"));
		}
		if(event?.type === "click"){
			window.scroll({top: 0});
		}
	}
}


const Page = {};
class PageData{
	constructor(param){
		this.id = param["id"];
		this.Fields = param["setFields"];
		this.createBody = param["createBody"];
		this.menu = this.#createMenu(param["headerText"]);
		this.article = null;
		for(const [key, value] of Object.entries(param["functions"])){
			this[key] = value;
		}
		this.show_expansion = param["show_expansion"];
		Page[this.id] = this;
	}
	#createMenu = (headerText) => {
		const a = document.createElement("a");
		a.href = `?page=${this.id}`;
		a.textContent = headerText;
		Menu.add(a);
		return a;
	}
	#createArticle = () => {
		if(this.article){
			return;
		}
		const article = document.createElement("article");
		article.id = `Article${this.id}`;
		document.getElementById("MainContent").append(article);
		article.append(this.createBody());
		this.article = article;
	}
	show = () => {
		this.#createArticle();
		uniqueClassName("sc", this.article);
		uniqueClassName("active", this.menu);
	}
}

new PageData({
	id: "PlayerData",
	headerText: "💪 プレイヤー挑戦データ",
	createBody: function(){
		const fragment = document.createDocumentFragment();
		const form = document.createElement("form");
		form.setAttribute("onSubmit", "return false;");
		fragment.append(form);
		{
			const label = document.createElement("label");
			form.append(label);
			const span = document.createElement("span");
			span.textContent = "プレイヤーＩＤ";
			label.append(span);
			const input = document.createElement("input");
			input.id = "inputPlayerID";
			input.type = "number";
			input.min = "0";
			input.step = "1";
			input.value = "16842796";
			label.append(input);
		}
		{
			const button = document.createElement("button");
			button.type = "submit";
			button.textContent = "探す";
			button.addEventListener("click", () => {
				this.main_search();
				const player_id = document.querySelector("#inputPlayerID").value;
				let url = IFURL.query.set("player_id", player_id);
				IFURL.pushHistory(url);
			});
			form.append(button);
		}
		return fragment;
	},
	functions: {
		"main_search": function(){
			const player_id = document.querySelector("#inputPlayerID").value;
			let section;
			if(this.isExist(player_id)){
				section = this.createSection();
			}
			uniqueClassName("sc2", section);
		},
		"isExist": function(player_id){
			if(!player_id){
				return false;
			}
			if(!Players[player_id]){
				alert("プレイヤーがいません。");
				return false;
			}
			return true;
		},
		"popstate_search": function(){
			const player_id = IFURL.query.get("player_id");
			if(player_id){
				document.querySelector("#inputPlayerID").value = player_id;
				this.main_search();
			}
		},
		"createSection": function(){
			const player_id = document.querySelector("#inputPlayerID").value;
			const sectionId = `${this.id}${player_id}`;
			let section = document.getElementById(sectionId);
			if(section){
				return section;
			}
			
			this.datas = PlayerMissions[player_id];	/*全体のデータなどで事前集計しているのならそこを参照する*/
			if(!this.datas){
				this.datas = [];
				const pi = Number(player_id);
				for(const [mission_id, mission_data] of Object.entries(Missions)){
					const index = mission_data["Ws"].indexOf(pi);
					if(index === -1){
						continue;
					}
					
					const o = {};
					o["L"] = mission_data["L"];
					o["level"] = getNumberLevel(o["L"]);
					o["D"] = mission_data["D"];
					o["I"] = mission_data["I"];
					o["R"] = index + 1;
					o["P"] = getEP(o["level"], o["R"]);
					o["T"] = mission_data["T"];
					o["MissionID"] = mission_id;
					this.datas.push(o);
				}
			}
			if(!this.datas.length){
				alert("データがありません…\n絞り込みを変更してみてください。");
				return null;
			}
			
			this.kind_sums = {};
			for(const [kind, src] of Object.entries(SeasonKindImgs)){
				this.kind_sums[kind] = {};
				this.kind_sums[kind]["img"] = src;
				this.kind_sums[kind]["sum"] = {};
				this.kind_sums[kind]["sum"]["levels"] = 0;
				this.kind_sums[kind]["sum"]["eps"] = 0;
				this.kind_sums[kind]["sum"]["count"] = 0;
			}
			
			section = document.createElement("section");
			section.id = sectionId;
			this.article.append(section);
			
			section.append(createTable.call(this, {
				"unityID": "PlayerChallengeData",
				"caption_text": `<b>${Players[player_id]}</b>さんのクエストデータ`,
				"isSortable": true,
				"style": `
				`,
				"THS": [
					{
						"name": "レベル⚡️",
						"details": "クエストのレベル（＝挑戦するのに必要なアクティビティ数）です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.textContent = `L${data["L"]}`;
							td.dataset.truenum = data["level"];
						},
					},
					{
						"name": "内容",
						"details": "クエストの内容です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							const a = document.createElement("a");
							a.href = `?page=MissionData&mission_id=${data["MissionID"]}`;
							[td.dataset.truenum, a.textContent] = getDecodeMissionDetail(data["D"]);
							td.append(a);
/*
							[td.dataset.truenum, td.textContent] = getDecodeMissionDetail(data["D"]);
*/
						},
					},
					{
						"name": "分類",
						"details": "クエストで得られるEPの分類です。",
						"initShow": true,
						"style": `
							text-align: center;
						`,
						"makeTD": (td, data) => {
							const src = `${IMG_DOMAIN}${data["I"]}`;
							const kind = EVENTPOINT_KIND_IMAGE_HASHS[src]
							td.dataset.truenum = kind;
							const img = document.createElement("img");
							img.src = src;
							img.setAttribute("alt", EVENTPOINT_KIND_NAMES[kind]);
							td.append(img);
						},
					},
					{
						"name": "順位👑",
						"details": "クリアした順位です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							const a = document.createElement("a");
							a.href = `?page=MissionData&mission_id=${data["MissionID"]}`;
							a.textContent = data["R"];
							td.append(a);
						},
					},
					{
						"name": "EP🍬",
						"details": "獲得したEP数です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = data["P"];
						},
					},
					{
						"name": "🍬/⚡️",
						"details": "1レベルあたりの獲得EPです。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							[td.dataset.truenum, td.textContent] = getDivision(data["P"], data["level"]);
						},
					},
					{
						"name": "開催時刻",
						"details": "クエストが開催された時刻です。",
						"initShow": false,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.textContent = getHayaimogatiDate(data["T"]);
						},
					},
				],
				"createTbodyFunction": (tbody, param) => {
					this.datas.forEach((data) => {
						const src = `${IMG_DOMAIN}${data["I"]}`;
						const kind = EVENTPOINT_KIND_IMAGE_HASHS[src];
						this.kind_sums[kind]["sum"]["levels"] += data["level"];
						this.kind_sums[kind]["sum"]["eps"] += Number(data["P"]);
						this.kind_sums[kind]["sum"]["count"] += 1;
						
						const tr = document.createElement("tr");
						tbody.append(tr);
						param["THS"].forEach((TH) => {
							const td = document.createElement("td");
							TH["makeTD"](td, data);
							tr.append(td);
						});
					});
				},
			}));
			
			
			section.append(createTable.call(this, {
				"unityID": "PlayerChallengeSummary",
				"caption_text": `<b>${Players[player_id]}</b>さんのデータまとめ`,
				"isSortable": true,
				"style": `
					order: -1;
				`,
				"THS": [
					{
						"name": "分類",
						"details": "クエストで得られるEPの分類です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.dataset.truenum = data[2]
							if(data[1]){
								const img = document.createElement("img");
								img.src = data[1];
								td.append(img);
							}
							const span = document.createElement("span");
							span.textContent = data[0];
							td.append(span);
						},
					},
					{
						"name": "mission🪧",
						"details": "クリアしたクエスト数です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = data[3]["count"];
						},
					},
					{
						"name": "レベル⚡️",
						"details": "クエストのレベル（＝挑戦するのに必要なアクティビティ数）です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = data[3]["levels"];
						},
					},
					{
						"name": "EP🍬",
						"details": "獲得したEP数です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = data[3]["eps"];
						},
					},
					{
						"name": "🍬/⚡️",
						"details": "1レベルあたりの獲得EPです。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							[td.dataset.truenum, td.textContent] = getDivision(data[3]["eps"], data[3]["levels"]);
						},
					},
					{
						"name": "🍬/🪧",
						"details": "1クエストあたりの獲得EPです。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							[td.dataset.truenum, td.textContent] = getDivision(data[3]["eps"], data[3]["count"]);
						},
					},
				],
				"createTbodyFunction": (tbody, param) => {
					const summaryDatas = [];
					{
						const sumdata = {};
						sumdata["levels"] = 0;
						sumdata["eps"] = 0;
						sumdata["count"] = 0;
						for(const [kind, value] of Object.entries(this.kind_sums)){
							summaryDatas.push([EVENTPOINT_KIND_NAMES[kind], value["img"], kind, value["sum"]]);
							sumdata["levels"] += value["sum"]["levels"];
							sumdata["eps"] += value["sum"]["eps"];
							sumdata["count"] += value["sum"]["count"];
						}
						summaryDatas.push(["＊合計", "", "ZZ", sumdata]);
					}
					summaryDatas.forEach((data) => {
						const tr = document.createElement("tr");
						tbody.append(tr);
						param["THS"].forEach((TH) => {
							const td = document.createElement("td");
							TH["makeTD"](td, data);
							tr.append(td);
						});
					});
				},
			}));
			Filter.setHref(section);
			return section;
		},
	},
	show_expansion: function(){
		this.popstate_search();
	},
});
new PageData({
	id: "MissionData",
	headerText: "🪧 ミッションデータ",
	createBody: function(){
		const fragment = document.createDocumentFragment();
		const form = document.createElement("form");
		form.setAttribute("onSubmit", "return false;");
		fragment.append(form);
		{
			const label = document.createElement("label");
			form.append(label);
			const span = document.createElement("span");
			span.textContent = "ミッションＩＤ";
			label.append(span);
			const input = document.createElement("input");
			input.id = "inputMissionID";
			input.type = "number";
			input.min = "0";
			input.step = "1";
			input.value = Object.keys(Missions)[0];
			label.append(input);
		}
		{
			const button = document.createElement("button");
			button.type = "submit";
			button.textContent = "探す";
			button.addEventListener("click", () => {
				this.mainSearch_target();
				const mission_id = document.querySelector("#inputMissionID").value;
				let url = IFURL.query.set("mission_id", mission_id);
				IFURL.pushHistory(url);
			});
			form.append(button);
		}
		{
			const button = document.createElement("button");
			button.type = "submit";
			button.textContent = "全部見る";
			button.addEventListener("click", () => {
				this.mainSearch_all();
				const mission_id = document.querySelector("#inputMissionID").value;
				let url = IFURL.query.set("page", this.id);
				url = IFURL.query.delete("mission_id", url);
				IFURL.pushHistory(url);
			});
			form.append(button);
		}
		return fragment;
	},
	functions: {
		"mainSearch_target": function(){
			const mission_id = document.querySelector("#inputMissionID").value;
			let section = null;
			if(this.isExist(mission_id)){
				section = this.createSection_target();
			}
			uniqueClassName("sc2", section);
		},
		"mainSearch_all": function(){
			const section = this.createSection_all();
			uniqueClassName("sc2", section);
		},
		"isExist": function(mission_id){
			if(!mission_id){
				return false;
			}
			if(!Missions[mission_id]){
				alert(`ミッションＩＤ「${mission_id}」はありません。`);
				return false;
			}
			return true;
		},
		"popstate_search": function(){
			const mission_id = IFURL.query.get("mission_id");
			if(mission_id){
				document.querySelector("#inputMissionID").value = mission_id;
				this.mainSearch_target();
			}else{
				this.mainSearch_all();
			}
		},
		"createSection_all": function(){
			const sectionId = `${this.id}AllMission`;
			let section = document.getElementById(sectionId);
			if(section){
				return section;
			}
			
			this.datas = [];
			for(const [key, value] of Object.entries(Missions)){
				const o = {};
				o["ID"] = key;
				o["L"] = value["L"];
				o["level"] = getNumberLevel(o["L"]);
				o["D"] = value["D"];
				o["I"] = value["I"];
				o["S"] = value["S"];
				o["T"] = value["T"];
				o["Ws"] = value["Ws"];
				o["pop"] = getDivision(o["Ws"].length * 100, getToubaiLine(o["level"]));
				this.datas.push(o);
			}
			if(!this.datas.length){
				alert("データがありません…\n絞り込みを変更してみてください。");
				return null;
			}
			
			this.kind_sums = {};
			for(const [kind, src] of Object.entries(SeasonKindImgs)){
				this.kind_sums[kind] = {};
				this.kind_sums[kind]["img"] = src;
				this.kind_sums[kind]["sum"] = {};
				this.kind_sums[kind]["sum"]["levels"] = 0;
				this.kind_sums[kind]["sum"]["winners"] = 0;
				this.kind_sums[kind]["sum"]["popa"] = [];
			}
			
			section = document.createElement("section");
			section.id = sectionId;
			this.article.append(section);
			
			section.append(createTable.call(this, {
				"unityID": "AllMissionData",
				"caption_text": "ミッションデータ一覧",
				"isSortable": true,
				"style": `
				`,
				"THS": [
					{
						"name": "ID",
						"details": "クエストのIDです。",
						"initShow": false,
						"style": `
						`,
						"makeTD": (td, data) => {
							const a = document.createElement("a");
							a.href = `?page=${this.id}&mission_id=${data["ID"]}`;
							a.textContent = data["ID"];
							td.append(a);
						},
					},
					{
						"name": "レベル⚡️",
						"details": "クエストのレベル（＝挑戦するのに必要なアクティビティ数）です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.textContent = `L${data["L"]}`;
							td.dataset.truenum = data["level"];
						},
					},
					{
						"name": "内容",
						"details": "クエストの内容です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							const a = document.createElement("a");
							a.href = `?page=${this.id}&mission_id=${data["ID"]}`;
							[td.dataset.truenum, a.textContent] = getDecodeMissionDetail(data["D"]);
							td.append(a);
/*
							[td.dataset.truenum, td.textContent] = getDecodeMissionDetail(data["D"]);
*/
						},
					},
					{
						"name": "分類",
						"details": "クエストで得られるEPの分類です。",
						"initShow": true,
						"style": `
							text-align: center;
						`,
						"makeTD": (td, data) => {
							const src = `${IMG_DOMAIN}${data["I"]}`;
							td.dataset.truenum = EVENTPOINT_KIND_IMAGE_HASHS[src];
							const img = document.createElement("img");
							img.src = src;
							img.setAttribute("alt", EVENTPOINT_KIND_NAMES[td.dataset.truenum]);
							td.append(img);
						},
					},
					{
						"name": "勝者",
						"details": "クエストの勝者数です。",
						"initShow": false,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = data["Ws"].length;
/*
							const a = document.createElement("a");
							a.href = `?page=MissionData&mission_id=${data["ID"]}`;
							a.textContent = data["Ws"].length;
							td.append(a);
*/
						},
					},
					{
						"name": "1.0倍ライン",
						"details": "EP/LEVELが1.0となる順位です。",
						"initShow": false,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = getToubaiLine(data["level"]);
						},
					},
					{
						"name": "人気度(%)",
						"details": "1.0倍ラインに対するクリアしたプレイヤーの割合です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							if(isNaN(data["pop"][0])){
								td.dataset.truenum = 0;
								const u = document.createElement("u");
								u.textContent = NaN;
								u.addEventListener("click", () => {
									const text = `
										マスタの設定がまだ不十分なため、この値は正しく表示されていません。
										（レベル：${data["level"]}）
									`;
									alert(text.replace(/\t/g, ""));
								})
								td.append(u);
							}else{
								[td.dataset.truenum, td.textContent] = data["pop"];
							}
						},
					},
					{
						"name": "最終🍬/⚡️",
						"details": "最後にクリアしたプレイヤーのEP/LEVELです。",
						"initShow": false,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							[td.dataset.truenum, td.textContent] = getDivision(getEP(data["level"], data["Ws"].length), data["level"]);
						},
					},
					{
						"name": "開催時刻",
						"details": "クエストが開催された時刻です。",
						"initShow": false,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.textContent = getHayaimogatiDate(data["T"]);
						},
					},
					{
						"name": "シーズン",
						"details": "クエストが開催されたシーズンです。",
						"initShow": false,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.textContent = `S${data["S"]}`;
						},
					},
				],
				"createTbodyFunction": (tbody, param) => {
					this.datas.forEach((data) => {
						const src = `${IMG_DOMAIN}${data["I"]}`;
						const kind = EVENTPOINT_KIND_IMAGE_HASHS[src];
						this.kind_sums[kind]["sum"]["levels"] += data["level"];
						this.kind_sums[kind]["sum"]["winners"] += data["Ws"].length;
						this.kind_sums[kind]["sum"]["popa"].push(Number(data["pop"][0]));
						const tr = document.createElement("tr");
						tbody.append(tr);
						param["THS"].forEach((TH) => {
							const td = document.createElement("td");
							TH["makeTD"](td, data);
							tr.append(td);
						});
					});
				},
			}));

			/*まとめテーブル作成*/
			section.append(createTable.call(this, {
				"unityID": "AllMissionSummary",
				"caption_text": "ミッションデータまとめ",
				"isSortable": true,
				"style": `
					order: -1;
				`,
				"THS": [
					{
						"name": "分類",
						"details": "クエストで得られるEPの分類です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.dataset.truenum = data[2]
							if(data[1]){
								const img = document.createElement("img");
								img.src = data[1];
								td.append(img);
							}
							const span = document.createElement("span");
							span.textContent = data[0];
							td.append(span);
						},
					},
					{
						"name": "mission🪧",
						"details": "公開されたクエスト数です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = data[3]["popa"].length;
						},
					},
					{
						"name": "レベル⚡️",
						"details": "クエストのレベル（＝挑戦するのに必要なアクティビティ数）です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = data[3]["levels"];
						},
					},
					{
						"name": "勝者",
						"details": "クエストの勝者数です。",
						"initShow": false,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = data[3]["winners"];
						},
					},
					{
						"name": "平均人気度(%)",
						"details": "1.0倍ラインに対するクリアしたプレイヤーの割合です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							if(data[3]["popa"].includes(NaN)){
								td.dataset.truenum = 0;
								const u = document.createElement("u");
								u.textContent = NaN;
								u.addEventListener("click", () => {
									const text = `
										マスタの設定がまだ不十分なため、この値は正しく表示されていません。
									`;
									alert(text.replace(/\t/g, ""));
								})
								td.append(u);
							}else{
								[td.dataset.truenum, td.textContent] = calcTrimAverage(data[3]["popa"], 0);
							}
						},
					},
				],
				
				"createTbodyFunction": (tbody, param) => {
					const summaryDatas = [];
					{
						const sumdata = {};
							sumdata["levels"] = 0;
							sumdata["winners"] = 0;
							sumdata["popa"] = [];
						for(const [kind, value] of Object.entries(this.kind_sums)){
							summaryDatas.push([EVENTPOINT_KIND_NAMES[kind], value["img"], kind, value["sum"]]);
							sumdata["levels"] += value["sum"]["levels"];
							sumdata["winners"] += value["sum"]["winners"];
							sumdata["popa"] = sumdata["popa"].concat(value["sum"]["popa"]);
						}
						summaryDatas.push(["＊合計", "", "ZZ", sumdata]);
					}
					summaryDatas.forEach((data) => {
						const tr = document.createElement("tr");
						tbody.append(tr);
						param["THS"].forEach((TH) => {
							const td = document.createElement("td");
							TH["makeTD"](td, data);
							tr.append(td);
						});
					});
				},
			}));
			Filter.setHref(section);
			return section;
		},
		
		
		"createSection_target": function(){
			const mission_id = document.querySelector("#inputMissionID").value;
			const sectionId = `${this.id}${mission_id}`;
			let section = document.getElementById(sectionId);
			if(section){
				return section;
			}
			
			const data = Missions[mission_id];
			data["level"] = getNumberLevel(data["L"]);
			
			section = document.createElement("section");
			section.id = sectionId;
			this.article.append(section);
			
			section.append(createTable.call(this, {
				"unityID": "TargetMissionDetail",
				"caption_text": `ミッション「<b>${mission_id}</b>」のデータ`,
				"isSortable": false,
				"style": `
				`,
				"THS": [
					{
						"name": "レベル⚡️",
						"details": "クエストのレベル（＝挑戦するのに必要なアクティビティ数）です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.textContent = `L${data["L"]}`;
							td.dataset.truenum = data["level"];
						},
					},
					{
						"name": "内容",
						"details": "クエストの内容です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							const param = data["D"].split("#");
							let text = full_reconstructFuncs[param["0"]](param["1"], param["2"], param["3"]);
							if(text.includes("カスタム")){
								const mat = text.match(/\d+x\d+\/\d+/)[0];
								text = text.replace(mat, `<a href="https://minesweeper.online/ja/start/${mat}" target="_blank" rel="noopener noreferrer">${mat}</a>`);
							}
							td.innerHTML = text;
							
						},
					},
					{
						"name": "分類",
						"details": "クエストで得られるEPの分類です。",
						"initShow": true,
						"style": `
							text-align: center;
						`,
						"makeTD": (td, data) => {
							const src = `${IMG_DOMAIN}${data["I"]}`;
							const kind = EVENTPOINT_KIND_IMAGE_HASHS[src]
							td.dataset.truenum = kind;
							const img = document.createElement("img");
							img.src = src;
							img.setAttribute("alt", EVENTPOINT_KIND_NAMES[kind]);
							td.append(img);
						},
					},
					{
						"name": "勝者",
						"details": "クエストの勝者数です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data) => {
							td.textContent = data["Ws"].length;
						},
					},
					{
						"name": "シーズン",
						"details": "クエストが開催されたシーズンです。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.textContent = `S${data["S"]}`;
						},
					},
					{
						"name": "開催時刻",
						"details": "クエストが開催された時刻です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, data) => {
							td.textContent = getHayaimogatiDate(data["T"]);
						},
					},
				],
				"createTbodyFunction": (tbody, param) => {
					const tr = document.createElement("tr");
					tbody.append(tr);
					param["THS"].forEach((TH) => {
						const td = document.createElement("td");
						TH["makeTD"](td, data);
						tr.append(td);
					});
				},
			}));
			
			
			section.append(createTable.call(this, {
				"unityID": "TargetMissionWinners",
				"caption_text": `ミッション「<b>${mission_id}</b>」の勝者データ`,
				"isSortable": false,
				"style": `
				`,
				"THS": [
					{
						"name": "順位👑",
						"details": "クエストをクリアした順位です。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, data, rank) => {
							td.textContent = rank;
						},
					},
					{
						"name": "プレイヤー",
						"details": "プレイヤー名です。",
						"initShow": true,
						"style": `
						`,
						"makeTD": (td, pid, rank) => {
							const a = document.createElement("a");
							a.href = `?page=PlayerData&player_id=${pid}`;
							a.textContent = Players[pid];
							td.append(a);
						},
					},
					{
						"name": "EP🍬",
						"details": "獲得したEPです。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, pid, rank) => {
							td.textContent = getEP(data["level"], rank);
						},
					},
					{
						"name": "🍬/⚡️",
						"details": "1レベルあたりの獲得EPです。",
						"initShow": true,
						"style": `
							text-align: right;
						`,
						"makeTD": (td, pid, rank) => {
							[td.dataset.truenum, td.textContent] = getDivision(getEP(data["level"], rank), data["level"]);
						},
					},
				],
				"createTbodyFunction": async(tbody, param) => {
					const newMap = splitArray(data["Ws"], 100);
					const morereadId = `buttonMoreRead${this.id}${mission_id}`;
					const func = appendMoreReadCaption.bind(this, morereadId, tbody.closest("table"));
					let rank = 0;
					for(let i = 0; i < newMap.length; i++){
						newMap[i].forEach((pid) => {
							rank++;
							const tr = document.createElement("tr");
							tbody.append(tr);
							param["THS"].forEach((TH) => {
								const td = document.createElement("td");
								TH["makeTD"](td, pid, rank);
								tr.append(td);
							});
						});
						
						if(i === newMap.length - 1){
							break;
						}
						if(!this[morereadId]){
							func();
							await Wait.add(morereadId);
						}
					}
					document.getElementById(morereadId)?.remove();
					delete this[morereadId];
				},
			}));
			Filter.setHref(section);
			return section;
		},
	},
	show_expansion: function(){
		this.popstate_search();
	},
});
new PageData({
	id: "AllData",
	headerText: "🗂️ 全体のデータ",
	setFields: {
		"summarys": {
			"A0": {
				"string": "ミッション内容ごとの平均人気度",
				"create": function(){
					this.datas = {};
					Object.entries(Missions).forEach(([id, obj]) => {
						if(!this.datas[obj["D"]]){
							this.datas[obj["D"]] = {};
							this.datas[obj["D"]]["ids"] = [];
							this.datas[obj["D"]]["levels"] = [];
							this.datas[obj["D"]]["pops"] = [];
							this.datas[obj["D"]]["s_pops"] = 0;
						}
						const level = getNumberLevel(obj["L"]);
						this.datas[obj["D"]]["ids"].push(id);
						this.datas[obj["D"]]["levels"].push(obj["L"]);
						const calc = getDivision(obj["Ws"].length * 100, getToubaiLine(level))[0];
						this.datas[obj["D"]]["pops"].push(calc);
						this.datas[obj["D"]]["s_pops"] += Number(calc);
					});
					
					if(!Object.keys(this.datas).length){
						alert("データがありません…\n絞り込みを変更してみてください。");
						return;
					}
					
					const table = createTable.call(this, {
						"unityID": "PopulalyPerMissionDetail",
						"caption_text": `<b>${this.Fields["summarys"]["A0"]["string"]}</b>`,
						"isSortable": true,
						"style": `
						`,
						"THS": [
							{
								"name": "内容",
								"details": "クエストの内容です。",
								"initShow": true,
								"style": `
								`,
								"makeTD": (td, key, data) => {
									[td.dataset.truenum, td.textContent] = getDecodeMissionDetail(key);
								},
							},
							{
								"name": "レベル",
								"details": "クエストのレベルです。\nソートは該当クエスト数で行われます。",
								"initShow": false,
								"style": `
								`,
								"makeTD": (td, key, data) => {
									const ul = document.createElement("ul");
									td.append(ul);
									data["levels"].forEach((level) => {
										const li = document.createElement("li");
										ul.append(li);
										const span = document.createElement("span");
										span.textContent = `L${level}`;
										li.append(span);
									});
									td.dataset.truenum = data["levels"].length;
								},
							},
							{
								"name": "ID",
								"details": "クエストのIDです。\nソートは該当クエスト数で行われます。",
								"initShow": true,
								"style": `
								`,
								"makeTD": (td, key, data) => {
									const ul = document.createElement("ul");
									td.append(ul);
									data["ids"].forEach((id) => {
										const li = document.createElement("li");
										ul.append(li);
										const img = document.createElement("img");
										img.src = `${IMG_DOMAIN}${Missions[id]["I"]}`;
										li.append(img);
										const a = document.createElement("a");
										a.href = `?page=MissionData&mission_id=${id}`;
										a.textContent = id;
										li.append(a);
									});
									td.dataset.truenum = data["ids"].length;
								},
							},
							{
								"name": "人気度(%)",
								"details": "1.0倍ラインに対するクリアしたプレイヤーの割合です。",
								"initShow": false,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, key, data) => {
									const ul = document.createElement("ul");
									td.append(ul);
									data["pops"].forEach((pop, ind) => {
										const li = document.createElement("li");
										ul.append(li);
										const span = document.createElement("span");
										if(isNaN(pop)){
											td.dataset.truenum = 0;
											const u = document.createElement("u");
											u.textContent = NaN;
											u.addEventListener("click", () => {
												const text = `
													マスタの設定がまだ不十分なため、この値は正しく表示されていません。
													（レベル：${data["levels"][ind]}）
												`;
												alert(text.replace(/\t/g, ""));
											})
											span.append(u);
										}else{
											span.textContent = pop;
										}
										li.append(span);
									});
									td.dataset.truenum = data["pops"].length;
								},
							},
							{
								"name": "平均人気度(%)",
								"details": "各クエストの人気度の平均です。",
								"initShow": true,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, key, data) => {
									if(isNaN(data["s_pops"])){
										td.dataset.truenum = 0;
										const u = document.createElement("u");
										u.textContent = NaN;
										u.addEventListener("click", () => {
											const text = `
												マスタの設定がまだ不十分なため、この値は正しく表示されていません。
											`;
											alert(text.replace(/\t/g, ""));
										})
										td.append(u);
									}else{
										[td.dataset.truenum, td.textContent] = getDivision(data["s_pops"], data["ids"].length);
									}
								},
							},
						],
						"createTbodyFunction": (tbody, param) => {
							Object.entries(this.datas).forEach(([key, data]) => {
								const tr = document.createElement("tr");
								tbody.append(tr);
								param["THS"].forEach((TH) => {
									const td = document.createElement("td");
									TH["makeTD"](td, key, data);
									tr.append(td);
								});
							});
						},
					});
					return table;
				}
			},
			
			"B0": {
//同率順位でブレイクしないバージョン
				"string": "プレイヤーランキング（クリアクエスト数）",
				"create": function(){
					this.arrs = [];
					Object.entries(PlayerMissions).forEach(([pid, mds]) => {
						this.arrs.push([pid, mds.length, getDivision(mds.length*100, this.challengableMissions)[0]]);
					});
					if(!this.arrs.length){
						alert("データがありません…\n絞り込みを変更してみてください。");
						return;
					}
					this.arrs.sort(function(a,b){
						if(a[1] < b[1]){
							return 1;
						}else{
							return -1;
						}
					});
					
					const table = createTable.call(this, {
						"unityID": "RankingPlayerCompleteMissionCount",
						"caption_text": `<b>${this.Fields["summarys"]["B0"]["string"]}</b>`,
						"isSortable": false,
						"style": `
						`,
						"THS": [
							{
								"name": "順位👑",
								"details": "クリアしたクエスト数の多さ順です。",
								"initShow": true,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, key, data) => {
									td.textContent = data["rank"];
								},
							},
							{
								"name": "プレイヤー",
								"details": "プレイヤー名です。",
								"initShow": true,
								"style": `
								`,
								"makeTD": (td, key, data) => {
									const a = document.createElement("a");
									a.href = `?page=PlayerData&player_id=${key}`;
									a.textContent = Players[key];
									td.append(a);
								},
							},
							{
								"name": "mission🪧",
								"details": "クリアしたクエスト数です。",
								"initShow": true,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, key, data) => {
									td.textContent = data["count"];
								},
							},
							{
								"name": "クリア率(%)",
								"details": "すべてのクエスト数に対するクリアしたクエスト数です。\nエリートと通常のクエストを両方抽出している場合は、その半分を総数としています（片方しか挑戦できないため）。",
								"initShow": true,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, key, data) => {
									td.dataset.truenum = data["percent"];
									td.textContent = data["percent"];
								},
							},
						],
						"createTbodyFunction": async(tbody, param) => {
							let bcount = 0;
							let rank = 0;
							let add = 1;
							let limitrank = 100;
							const morereadId = "buttonMoreReadB0";
							const func = appendMoreReadCaption.bind(this, morereadId, tbody.closest("table"));
							for(let i = 0; i < this.arrs.length; i++){
								const arr = this.arrs[i];
								const key = arr[0];
								const count = arr[1];
								if(bcount !== count){
									bcount = count;
									rank += add;
									add = 1;
								}else{
									add++;
								}
								if(rank > limitrank){
									if(!this[morereadId]){
										if(rank - limitrank > 100){
											limitrank = rank;
										}else{
											limitrank += 100;
										}
										func();
										await Wait.add(morereadId);
									}
								}
								
								const data = {
									"rank": rank,
									"count": count,
									"percent": arr[2],
								}
								const tr = document.createElement("tr");
								tbody.append(tr);
								param["THS"].forEach((TH) => {
									const td = document.createElement("td");
									TH["makeTD"](td, key, data);
									tr.append(td);
								});
							}
							document.getElementById(morereadId)?.remove();
							delete this[morereadId];
						},
						
					});
					const data_counts = new Array(6).fill(0);
					this.arrs.forEach((arr) => {
						const per = arr[2];
						let num = 1;
						switch(true){
							case per >= 50.00:
								num = 5;
								break;
							case per >= 25.00:
								num = 4;
								break;
							case per >= 10.00:
								num = 3;
								break;
							case per >= 5.00:
								num = 2;
								break;
						}
						data_counts[num]++;
					});
					data_counts[0] = Object.keys(Players).length - this.arrs.length;
					
					
					const canvas = createPie({
						"data_labels": ["0", "0%～", "5%～", "10%～", "25%～", "50%～"],
						"data_datasets_data": data_counts,
						"data_datasets_backgroundColor": ["#9d9488", "#8bc48c", "#6cb1dd", "#a953c6", "#ff863a", "#c26664"],
						"data_datasets_borderColor": ["#777", "#3c763d", "#236a97", "#a040c0", "#d05000", "#a94442"],
						"options_plugins_title_text": "ミッションクリア率ごとのプレイヤーの割合",
					});
/*
					const data_counts = new Array(6).fill(0);
					this.arrs.forEach((arr) => {
						const per = arr[2];
						let num = 0;
						switch(true){
							case per >= 75.00:
								num = 5;
								break;
							case per >= 50.00:
								num = 4;
								break;
							case per >= 25.00:
								num = 3;
								break;
							case per >= 10.00:
								num = 2;
								break;
							case per >= 5.00:
								num = 1;
								break;
						}
						data_counts[num]++;
					});
					
					
					const canvas = createPie({
						"data_labels": ["0%～", "5%～", "10%～", "25%～", "50%～", "75%～"],
						"data_datasets_data": data_counts,
						"data_datasets_backgroundColor": ["#9d9488", "#8bc48c", "#6cb1dd", "#a953c6", "#ff863a", "#c26664"],
						"data_datasets_borderColor": ["#777", "#3c763d", "#236a97", "#a040c0", "#d05000", "#a94442"],
						"options_plugins_title_text": "ミッションクリア率ごとのプレイヤーの割合",
					});
*/
					const fragment = document.createDocumentFragment();
					fragment.append(canvas);
					fragment.append(table);
					return fragment;
				}
			},
			"B01": {
//同率順位でブレイクするバージョン
				"string": "プレイヤーランキング（クリアクエスト数_break）",
				"create": function(){
					this.arrs = [];
					Object.entries(PlayerMissions).forEach(([pid, mds]) => {
						this.arrs.push([pid, mds.length]);
					});
					
					if(!this.arrs.length){
						alert("データがありません…\n絞り込みを変更してみてください。");
						return;
					}
					this.arrs.sort(function(a,b){
						if(a[1] < b[1]){
							return 1;
						}else{
							return -1;
						}
					});
					
					
					const table = createTable.call(this, {
						"unityID": "RankingPlayerCompleteMissionCount_break",
						"caption_text": `<b>${this.Fields["summarys"]["B01"]["string"]}</b>`,
						"isSortable": false,
						"style": `
						`,
						"THS": [
							{
								"name": "順位👑",
								"details": "クリアしたクエスト数の多さ順です。",
								"initShow": true,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, key, data) => {
									const span = document.createElement("span");
									span.textContent = data["rank"];
									td.append(span);
								},
							},
							{
								"name": "プレイヤー",
								"details": "プレイヤー名です。",
								"initShow": true,
								"style": `
								`,
								"makeTD": (td, pids, data) => {
									const ul = document.createElement("ul");
									td.append(ul);
									pids.forEach((pid) => {
										const li = document.createElement("li");
										ul.append(li);
										const a = document.createElement("a");
										a.href = `?page=PlayerData&player_id=${pid}`;
										a.textContent = Players[pid];
										li.append(a);
									});
									td.dataset.truenum = pids.length;
								},
							},
							{
								"name": "mission🪧",
								"details": "クリアしたクエスト数です。",
								"initShow": true,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, pids, data) => {
									const span = document.createElement("span");
									span.textContent = data["count"];
									td.append(span);
								},
							},
							{
								"name": "クリア率(%)",
								"details": "すべてのクエスト数に対するクリアしたクエスト数です。\nエリートと通常のクエストを両方抽出している場合は、その半分を総数としています（片方しか挑戦できないため）。",
								"initShow": true,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, pids, data) => {
									const span = document.createElement("span");
									[td.dataset.truenum, span.textContent] = getDivision(data["count"]*100, this.challengableMissions);
									td.append(span);
								},
							},
						],
						"createTbodyFunction": async(tbody, param) => {
							const putFunc = function(){
								const data = {
									"rank": rank,
									"count": bcount,
								}
								const tr = document.createElement("tr");
								tbody.append(tr);
								param["THS"].forEach((TH) => {
									const td = document.createElement("td");
									TH["makeTD"](td, pids, data);
									tr.append(td);
								});
							};
							let pids = [];
							let bcount = this.arrs[0][1];
							let rank = 1;
							let add = 0;
							const morereadId = "buttonMoreReadB01";
							const func = appendMoreReadCaption.bind(this, morereadId, tbody.closest("table"));
							let limitrank = 100;
							for(let i = 0; i < this.arrs.length; i++){
								const arr = this.arrs[i];
								const pid = arr[0];
								const count = arr[1];
								if(bcount !== count){
									putFunc();
									bcount = count;
									rank += add;
									add = 0;
									pids = [];
									
									if(rank > limitrank){
										if(!this[morereadId]){
											if(rank - limitrank > 100){
												limitrank = rank;
											}else{
												limitrank += 100;
											}
											func();
											await Wait.add(morereadId);
										}
									}
									
								}
								add++;
								pids.push(pid);
							}
							putFunc();
							document.getElementById(morereadId)?.remove();
							delete this[morereadId];
						}
						
					});
					return table;
				}
			},
			
			"B1": {
//同率順位でブレイクしないバージョン
				"string": "プレイヤーランキング（獲得EP数）",
				"create": function(){
					this.arrs = [];
					Object.entries(PlayerMissions).forEach(([pid, mds]) => {
						const sum = mds.reduce((sum, md) => md["P"] + sum, 0);
						this.arrs.push([pid, sum]);
					});
					if(!this.arrs.length){
						alert("データがありません…\n絞り込みを変更してみてください。");
						return;
					}
					this.arrs.sort(function(a,b){
						if(a[1] < b[1]){
							return 1;
						}else{
							return -1;
						}
					});
					
					const table = createTable.call(this, {
						"unityID": "RankingPlayerGetEventPoints",
						"caption_text": `<b>${this.Fields["summarys"]["B1"]["string"]}</b>`,
						"isSortable": false,
						"style": `
						`,
						"THS": [
							{
								"name": "順位👑",
								"details": "獲得EPの多さ順です。",
								"initShow": true,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, key, data) => {
									td.textContent = data["rank"];
								},
							},
							{
								"name": "プレイヤー",
								"details": "プレイヤー名です。",
								"initShow": true,
								"style": `
								`,
								"makeTD": (td, key, data) => {
									const a = document.createElement("a");
									a.href = `?page=PlayerData&player_id=${key}`;
									a.textContent = Players[key];
									td.append(a);
								},
							},
							{
								"name": "EP🍬",
								"details": "獲得したEPです。",
								"initShow": true,
								"style": `
									text-align: right;
								`,
								"makeTD": (td, key, data) => {
									td.textContent = data["eps"];
								},
							},
						],
						"createTbodyFunction": async(tbody, param) => {
							let bcount = 0;
							let rank = 0;
							let add = 1;
							let limitrank = 100;
							const morereadId = "buttonMoreReadB1";
							const func = appendMoreReadCaption.bind(this, morereadId, tbody.closest("table"));
							for(let i = 0; i < this.arrs.length; i++){
								const arr = this.arrs[i];
								const key = arr[0];
								const count = arr[1];
								if(bcount !== count){
									bcount = count;
									rank += add;
									add = 1;
								}else{
									add++;
								}
								if(rank > limitrank){
									if(!this[morereadId]){
										if(rank - limitrank > 100){
											limitrank = rank;
										}else{
											limitrank += 100;
										}
										func();
										await Wait.add(morereadId);
									}
								}
								
								const data = {
									"rank": rank,
									"eps": count,
								}
								const tr = document.createElement("tr");
								tbody.append(tr);
								param["THS"].forEach((TH) => {
									const td = document.createElement("td");
									TH["makeTD"](td, key, data);
									tr.append(td);
								});
							}
							document.getElementById(morereadId)?.remove();
							delete this[morereadId];
						},
						
					});
					
					const data_counts = new Array(6).fill(0);
					this.arrs.forEach((arr) => {
						const ep = arr[1];
						let num = 0;
						switch(true){
							case ep >= 20000:
								num = 5;
								break;
							case ep >= 2000:
								num = 4;
								break;
							case ep >= 500:
								num = 3;
								break;
							case ep >= 100:
								num = 2;
								break;
							case ep >= 10:
								num = 1;
								break;
						}
						data_counts[num]++;
					});
					
					
					const canvas = createPie({
						"data_labels": ["1～", "10～", "100～", "500～", "2000～", "20000～"],
						"data_datasets_data": data_counts,
						"data_datasets_backgroundColor": ["#9d9488", "#8bc48c", "#6cb1dd", "#a953c6", "#ff863a", "#c26664"],
						"data_datasets_borderColor": ["#777", "#3c763d", "#236a97", "#a040c0", "#d05000", "#a94442"],
						"options_plugins_title_text": "獲得EPごとのプレイヤー数",
					});
					const fragment = document.createDocumentFragment();
					fragment.append(canvas);
					fragment.append(table);
					return fragment;
				}
			},
			
		},
	},
	createBody: function(){
		const fragment = document.createDocumentFragment();
		{
			const aside = document.createElement("aside");
			aside.id = `aside${this.id}List`;
			fragment.append(aside);
			const ul = document.createElement("ul");
			aside.append(ul);
			Object.entries(this.Fields["summarys"]).forEach(([id, obj]) => {
				const li = document.createElement("li");
				ul.append(li);
				const a = document.createElement("a");
				a.textContent = obj["string"];
				a.href = `?page=${this.id}&summary_id=${id}`;
				li.append(a);
			});
			Filter.setHref(ul);
		}
		{
			setPlayerMissions();
			this.maxMissions = Object.keys(Missions).length;
			this.challengableMissions = getChallengableMissions();
			
			const dl = document.createElement("dl");
			dl.classList.add("tableDetail");
			fragment.append(dl);
			const dls = [
				["プレイヤー数", Object.keys(PlayerMissions).length],
				["ミッション数", this.maxMissions],
				["挑戦可能なミッション数", this.challengableMissions],
			];
			dls.forEach((ele) => {
				const dt = document.createElement("dt");
				dt.textContent = ele[0];
				dl.append(dt);
				const dd = document.createElement("dd");
				if(isNaN(ele[1])){
					const u = document.createElement("u");
					u.textContent = ele[1];
					u.addEventListener("click", () => {
						const text = `
							抽出しているクエストのレベルが次の場合に計算できます。
							１．すべてのレベルを抽出している
							２．通常のみ
							３．エリート＋☠のみ
						`;
						alert(text.replace(/\t/g, ""));
					})
					dd.append(u);
				}else{
					dd.textContent = ele[1];
				}
				dl.append(dd);
			});
		}
		return fragment;
	},
	functions: {
		"popstate": function(){
			const id = IFURL.query.get("summary_id");
			let section = null;
			if(this.Fields["summarys"][id]){
				section = this.createTargetSummary(id);
			}
			uniqueClassName("sc2", section);
		},
		"createTargetSummary": function(id){
			const sectionId = `${this.id}_${id}`;
			let section = document.getElementById(sectionId);
			if(!section){
				const dom = this.Fields["summarys"][id]["create"].call(this);
				if(!dom){
					return;
				}
				section = document.createElement("section");
				section.id = sectionId;
				this.article.append(section);
				section.append(dom);
				Filter.setHref(dom);
			}
			return section;
		}
	},
	show_expansion: function(){
		this.popstate();
	},
});



async function startUp(){
	await setUseData();
	PageMove.popstate();
}
startUp();



})();


  </script>
</html>
